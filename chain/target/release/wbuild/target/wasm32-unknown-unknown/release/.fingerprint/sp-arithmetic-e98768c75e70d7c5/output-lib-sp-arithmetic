{"message":"type annotations needed","code":{"code":"E0282","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0282\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nApart from a method or function with a generic type parameter, this error can\noccur when a type parameter of a struct or trait cannot be inferred. In that\ncase it is not always possible to use a type annotation, because all candidates\nhave the same return type. For instance:\n\n```compile_fail,E0282\nstruct Foo<T> {\n    num: T,\n}\n\nimpl<T> Foo<T> {\n    fn bar() -> i32 {\n        0\n    }\n\n    fn baz() {\n        let number = Foo::bar();\n    }\n}\n```\n\nThis will fail because the compiler does not know which instance of `Foo` to\ncall `bar` on. Change `Foo::bar()` to `Foo::<T>::bar()` to resolve the error.\n"},"level":"error","spans":[{"file_name":"/home/zb/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.0/src/fixed_point.rs","byte_start":15827,"byte_end":15835,"line_start":541,"line_end":541,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"\t\t\t\tlet accuracy = P::ACCURACY.saturated_into();","highlight_start":9,"highlight_end":17}],"label":"consider giving `accuracy` a type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/zb/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.0/src/fixed_point.rs","byte_start":50972,"byte_end":51137,"line_start":1595,"line_end":1602,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"implement_fixed!(","highlight_start":1,"highlight_end":18},{"text":"\tFixedI64,","highlight_start":1,"highlight_end":11},{"text":"\ttest_fixed_i64,","highlight_start":1,"highlight_end":17},{"text":"\ti64,","highlight_start":1,"highlight_end":6},{"text":"\ttrue,","highlight_start":1,"highlight_end":7},{"text":"\t1_000_000_000,","highlight_start":1,"highlight_end":16},{"text":"\t\"_Fixed Point 64 bits signed, range = [-9223372036.854775808, 9223372036.854775807]_\",","highlight_start":1,"highlight_end":88},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"implement_fixed!","def_site_span":{"file_name":"/home/zb/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.0/src/fixed_point.rs","byte_start":10752,"byte_end":50970,"line_start":333,"line_end":1593,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! implement_fixed {","highlight_start":1,"highlight_end":31},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$name:ident,","highlight_start":1,"highlight_end":15},{"text":"\t\t$test_mod:ident,","highlight_start":1,"highlight_end":19},{"text":"\t\t$inner_type:ty,","highlight_start":1,"highlight_end":18},{"text":"\t\t$signed:tt,","highlight_start":1,"highlight_end":14},{"text":"\t\t$div:tt,","highlight_start":1,"highlight_end":11},{"text":"\t\t$title:expr $(,)?","highlight_start":1,"highlight_end":20},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// A fixed point number representation in the range.","highlight_start":1,"highlight_end":56},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t#[doc = $title]","highlight_start":1,"highlight_end":18},{"text":"\t\t#[derive(Encode, Decode, Default, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]","highlight_start":1,"highlight_end":82},{"text":"\t\tpub struct $name($inner_type);","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl From<$inner_type> for $name {","highlight_start":1,"highlight_end":37},{"text":"\t\t\tfn from(int: $inner_type) -> Self {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$name::saturating_from_integer(int)","highlight_start":1,"highlight_end":40},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<N: FixedPointOperand, D: FixedPointOperand> From<(N, D)> for $name {","highlight_start":1,"highlight_end":76},{"text":"\t\t\tfn from(r: (N, D)) -> Self {","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t$name::saturating_from_rational(r.0, r.1)","highlight_start":1,"highlight_end":46},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl FixedPointNumber for $name {","highlight_start":1,"highlight_end":36},{"text":"\t\t\ttype Inner = $inner_type;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tconst DIV: Self::Inner = $div;","highlight_start":1,"highlight_end":34},{"text":"\t\t\tconst SIGNED: bool = $signed;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn from_inner(inner: Self::Inner) -> Self {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tSelf(inner)","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn into_inner(self) -> Self::Inner {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tself.0","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl $name {","highlight_start":1,"highlight_end":15},{"text":"\t\t\t/// const version of `FixedPointNumber::from_inner`.","highlight_start":1,"highlight_end":56},{"text":"\t\t\tpub const fn from_inner(inner: $inner_type) -> Self {","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\tSelf(inner)","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[cfg(any(feature = \"std\", test))]","highlight_start":1,"highlight_end":38},{"text":"\t\t\tpub fn from_fraction(x: f64) -> Self {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\tSelf((x * (<Self as FixedPointNumber>::DIV as f64)) as $inner_type)","highlight_start":1,"highlight_end":72},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[cfg(any(feature = \"std\", test))]","highlight_start":1,"highlight_end":38},{"text":"\t\t\tpub fn to_fraction(self) -> f64 {","highlight_start":1,"highlight_end":37},{"text":"\t\t\t\tself.0 as f64 / <Self as FixedPointNumber>::DIV as f64","highlight_start":1,"highlight_end":59},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl Saturating for $name {","highlight_start":1,"highlight_end":30},{"text":"\t\t\tfn saturating_add(self, rhs: Self) -> Self {","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tSelf(self.0.saturating_add(rhs.0))","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn saturating_sub(self, rhs: Self) -> Self {","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tSelf(self.0.saturating_sub(rhs.0))","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn saturating_mul(self, rhs: Self) -> Self {","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tself.checked_mul(&rhs).unwrap_or_else(|| to_bound(self.0, rhs.0))","highlight_start":1,"highlight_end":70},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn saturating_pow(self, exp: usize) -> Self {","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tif exp == 0 {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\treturn Self::saturating_from_integer(1);","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet exp = exp as u32;","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tlet msb_pos = 32 - exp.leading_zeros();","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet mut result = Self::saturating_from_integer(1);","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\tlet mut pow_val = self;","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tfor i in 0..msb_pos {","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t\tif ((1 << i) & exp) > 0 {","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\t\t\tresult = result.saturating_mul(pow_val);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\t\t}","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\tpow_val = pow_val.saturating_mul(pow_val);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tresult","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl ops::Neg for $name {","highlight_start":1,"highlight_end":28},{"text":"\t\t\ttype Output = Self;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn neg(self) -> Self::Output {","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tSelf(<Self as FixedPointNumber>::Inner::zero() - self.0)","highlight_start":1,"highlight_end":61},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl ops::Add for $name {","highlight_start":1,"highlight_end":28},{"text":"\t\t\ttype Output = Self;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn add(self, rhs: Self) -> Self::Output {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tSelf(self.0 + rhs.0)","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl ops::Sub for $name {","highlight_start":1,"highlight_end":28},{"text":"\t\t\ttype Output = Self;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn sub(self, rhs: Self) -> Self::Output {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tSelf(self.0 - rhs.0)","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl ops::Mul for $name {","highlight_start":1,"highlight_end":28},{"text":"\t\t\ttype Output = Self;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn mul(self, rhs: Self) -> Self::Output {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tself.checked_mul(&rhs)","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t.unwrap_or_else(|| panic!(\"attempt to multiply with overflow\"))","highlight_start":1,"highlight_end":69},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl ops::Div for $name {","highlight_start":1,"highlight_end":28},{"text":"\t\t\ttype Output = Self;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn div(self, rhs: Self) -> Self::Output {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tif rhs.0 == 0 {","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\tpanic!(\"attempt to divide by zero\")","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tself.checked_div(&rhs)","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t.unwrap_or_else(|| panic!(\"attempt to divide with overflow\"))","highlight_start":1,"highlight_end":67},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl CheckedSub for $name {","highlight_start":1,"highlight_end":30},{"text":"\t\t\tfn checked_sub(&self, rhs: &Self) -> Option<Self> {","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\tself.0.checked_sub(rhs.0).map(Self)","highlight_start":1,"highlight_end":40},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl CheckedAdd for $name {","highlight_start":1,"highlight_end":30},{"text":"\t\t\tfn checked_add(&self, rhs: &Self) -> Option<Self> {","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\tself.0.checked_add(rhs.0).map(Self)","highlight_start":1,"highlight_end":40},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl CheckedDiv for $name {","highlight_start":1,"highlight_end":30},{"text":"\t\t\tfn checked_div(&self, other: &Self) -> Option<Self> {","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\tif other.0 == 0 {","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\treturn None","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet lhs: I129 = self.0.into();","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\tlet rhs: I129 = other.0.into();","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\tlet negative = lhs.negative != rhs.negative;","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tmultiply_by_rational(lhs.value, Self::DIV as u128, rhs.value).ok()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\t\t.and_then(|value| from_i129(I129 { value, negative }))","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t.map(Self)","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl CheckedMul for $name {","highlight_start":1,"highlight_end":30},{"text":"\t\t\tfn checked_mul(&self, other: &Self) -> Option<Self> {","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\tlet lhs: I129 = self.0.into();","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\tlet rhs: I129 = other.0.into();","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\tlet negative = lhs.negative != rhs.negative;","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tmultiply_by_rational(lhs.value, rhs.value, Self::DIV as u128).ok()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\t\t.and_then(|value| from_i129(I129 { value, negative }))","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t.map(Self)","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl Bounded for $name {","highlight_start":1,"highlight_end":27},{"text":"\t\t\tfn min_value() -> Self {","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tSelf(<Self as FixedPointNumber>::Inner::min_value())","highlight_start":1,"highlight_end":57},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn max_value() -> Self {","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tSelf(<Self as FixedPointNumber>::Inner::max_value())","highlight_start":1,"highlight_end":57},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl sp_std::fmt::Debug for $name {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":27},{"text":"\t\t\tfn fmt(&self, f: &mut sp_std::fmt::Formatter) -> sp_std::fmt::Result {","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\tlet integral = {","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\tlet int = self.0 / Self::accuracy();","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t\tlet signum_for_zero = if int == 0 && self.is_negative() { \"-\" } else { \"\" };","highlight_start":1,"highlight_end":82},{"text":"\t\t\t\t\tformat!(\"{}{}\", signum_for_zero, int)","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\tlet precision = (Self::accuracy() as f64).log10() as usize;","highlight_start":1,"highlight_end":64},{"text":"\t\t\t\tlet fractional = format!(\"{:0>weight$}\", ((self.0 % Self::accuracy()) as i128).abs(), weight=precision);","highlight_start":1,"highlight_end":109},{"text":"\t\t\t\twrite!(f, \"{}({}.{})\", stringify!($name), integral, fractional)","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[cfg(not(feature = \"std\"))]","highlight_start":1,"highlight_end":32},{"text":"\t\t\tfn fmt(&self, _: &mut sp_std::fmt::Formatter) -> sp_std::fmt::Result {","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\tOk(())","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<P: PerThing> From<P> for $name {","highlight_start":1,"highlight_end":40},{"text":"\t\t\tfn from(p: P) -> Self {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tlet accuracy = P::ACCURACY.saturated_into();","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tlet value = p.deconstruct().saturated_into();","highlight_start":1,"highlight_end":50},{"text":"\t\t\t\t$name::saturating_from_rational(value, accuracy)","highlight_start":1,"highlight_end":53},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl sp_std::fmt::Display for $name {","highlight_start":1,"highlight_end":40},{"text":"\t\t\tfn fmt(&self, f: &mut sp_std::fmt::Formatter) -> sp_std::fmt::Result {","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\twrite!(f, \"{}\", self.0)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl sp_std::str::FromStr for $name {","highlight_start":1,"highlight_end":40},{"text":"\t\t\ttype Err = &'static str;","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn from_str(s: &str) -> Result<Self, Self::Err> {","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tlet inner: <Self as FixedPointNumber>::Inner = s.parse()","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t.map_err(|_| \"invalid string input for fixed point number\")?;","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tOk(Self::from_inner(inner))","highlight_start":1,"highlight_end":32},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Manual impl `Serialize` as serde_json does not support i128.","highlight_start":1,"highlight_end":66},{"text":"\t\t// TODO: remove impl if issue https://github.com/serde-rs/json/issues/548 fixed.","highlight_start":1,"highlight_end":83},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl Serialize for $name {","highlight_start":1,"highlight_end":29},{"text":"\t\t\tfn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>","highlight_start":1,"highlight_end":68},{"text":"\t\t\twhere","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\tS: Serializer,","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tserializer.serialize_str(&self.to_string())","highlight_start":1,"highlight_end":48},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Manual impl `Deserialize` as serde_json does not support i128.","highlight_start":1,"highlight_end":68},{"text":"\t\t// TODO: remove impl if issue https://github.com/serde-rs/json/issues/548 fixed.","highlight_start":1,"highlight_end":83},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<'de> Deserialize<'de> for $name {","highlight_start":1,"highlight_end":41},{"text":"\t\t\tfn deserialize<D>(deserializer: D) -> Result<Self, D::Error>","highlight_start":1,"highlight_end":64},{"text":"\t\t\twhere","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\tD: Deserializer<'de>,","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tuse sp_std::str::FromStr;","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\tlet s = String::deserialize(deserializer)?;","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t$name::from_str(&s).map_err(|err_str| de::Error::custom(err_str))","highlight_start":1,"highlight_end":70},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t#[cfg(test)]","highlight_start":1,"highlight_end":15},{"text":"\t\tmod $test_mod {","highlight_start":1,"highlight_end":18},{"text":"\t\t\tuse super::*;","highlight_start":1,"highlight_end":17},{"text":"\t\t\tuse crate::{Perbill, Percent, Permill, Perquintill};","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn max() -> $name {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t$name::max_value()","highlight_start":1,"highlight_end":23},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn min() -> $name {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t$name::min_value()","highlight_start":1,"highlight_end":23},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn precision() -> usize {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t($name::accuracy() as f64).log10() as usize","highlight_start":1,"highlight_end":48},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn macro_preconditions() {","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\tassert!($name::DIV > 0);","highlight_start":1,"highlight_end":29},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn from_i129_works() {","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tlet a = I129 {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tvalue: 1,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\tnegative: true,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Can't convert negative number to unsigned.","highlight_start":1,"highlight_end":50},{"text":"\t\t\t\tassert_eq!(from_i129::<u128>(a), None);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = I129 {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tvalue: u128::max_value() - 1,","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\tnegative: false,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max - 1 value fits.","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tassert_eq!(from_i129::<u128>(a), Some(u128::max_value() - 1));","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = I129 {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tvalue: u128::max_value(),","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\t\tnegative: false,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max value fits.","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tassert_eq!(from_i129::<u128>(a), Some(u128::max_value()));","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = I129 {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tvalue: i128::max_value() as u128 + 1,","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\tnegative: true,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Min value fits.","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tassert_eq!(from_i129::<i128>(a), Some(i128::min_value()));","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = I129 {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tvalue: i128::max_value() as u128 + 1,","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\tnegative: false,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max + 1 does not fit.","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tassert_eq!(from_i129::<i128>(a), None);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = I129 {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tvalue: i128::max_value() as u128,","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\tnegative: false,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max value fits.","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tassert_eq!(from_i129::<i128>(a), Some(i128::max_value()));","highlight_start":1,"highlight_end":63},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn to_bound_works() {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\tlet a = 1i32;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\tlet b = 1i32;","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Pos + Pos => Max.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\tassert_eq!(to_bound::<_, _, i32>(a, b), i32::max_value());","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = -1i32;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\tlet b = -1i32;","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Neg + Neg => Max.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\tassert_eq!(to_bound::<_, _, i32>(a, b), i32::max_value());","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = 1i32;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\tlet b = -1i32;","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Pos + Neg => Min.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\tassert_eq!(to_bound::<_, _, i32>(a, b), i32::min_value());","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = -1i32;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\tlet b = 1i32;","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Neg + Pos => Min.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\tassert_eq!(to_bound::<_, _, i32>(a, b), i32::min_value());","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = 1i32;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\tlet b = -1i32;","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Pos + Neg => Min (unsigned).","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\tassert_eq!(to_bound::<_, _, u32>(a, b), 0);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_neg_works() {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tlet a = $name::zero();","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tlet b = -a;","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Zero.","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\tassert_eq!(a, b);","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet a = $name::saturating_from_integer(5);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tlet b = -a;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Positive.","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(-5), b);","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_integer(-5);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\tlet b = -a;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Negative","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(5), b);","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::max_value();","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tlet b = -a;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Max.","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\tassert_eq!($name::min_value() + $name::from_inner(1), b);","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::min_value() + $name::from_inner(1);","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\tlet b = -a;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Min.","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\tassert_eq!($name::max_value(), b);","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_checked_add_overflow_works() {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tlet a = $name::max_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tlet b = 1.into();","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tassert!(a.checked_add(&b).is_none());","highlight_start":1,"highlight_end":42},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_add_works() {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tlet b = $name::saturating_from_rational(1, 2);","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Positive case: 6/2 = 3.","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(3), a + b);","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Negative case: 4/2 = 2.","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\tlet b = $name::saturating_from_rational(1, -2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(2), a + b);","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_checked_sub_underflow_works() {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tlet a = $name::min_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tlet b = 1.into();","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tassert!(a.checked_sub(&b).is_none());","highlight_start":1,"highlight_end":42},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_sub_works() {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tlet b = $name::saturating_from_rational(1, 2);","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2), a - b);","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(-2), b.saturating_sub(a));","highlight_start":1,"highlight_end":73},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_checked_mul_overflow_works() {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tlet a = $name::max_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tlet b = 2.into();","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tassert!(a.checked_mul(&b).is_none());","highlight_start":1,"highlight_end":42},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_mul_works() {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(42);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tlet b = $name::saturating_from_integer(2);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(84), a * b);","highlight_start":1,"highlight_end":59},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(42);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tlet b = $name::saturating_from_integer(-2);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(-84), a * b);","highlight_start":1,"highlight_end":60},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\t#[should_panic(expected = \"attempt to divide by zero\")]","highlight_start":1,"highlight_end":59},{"text":"\t\t\tfn op_div_panics_on_zero_divisor() {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(1);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tlet b = 0.into();","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tlet _c = a / b;","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_checked_div_overflow_works() {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet a = $name::min_value();","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tlet b = $name::zero().saturating_sub($name::one());","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\t\tassert!(a.checked_div(&b).is_none());","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_div_works() {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(42);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tlet b = $name::saturating_from_integer(2);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(21), a / b);","highlight_start":1,"highlight_end":59},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet a = $name::saturating_from_integer(42);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\tlet b = $name::saturating_from_integer(-2);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(-21), a / b);","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_from_integer_works() {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet accuracy = $name::accuracy();","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Cases where integer fits.","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(42);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 42 * accuracy);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(-42);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 0.saturating_sub(42 * accuracy));","highlight_start":1,"highlight_end":65},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max/min integers that fit.","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(inner_max / accuracy);","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!(a.into_inner(), (inner_max / accuracy) * accuracy);","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(inner_min / accuracy);","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!(a.into_inner(), (inner_min / accuracy) * accuracy);","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Cases where integer doesn't fit, so it saturates.","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(inner_max / accuracy + 1);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_integer((inner_min / accuracy).saturating_sub(1));","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":43},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn checked_from_integer_works() {","highlight_start":1,"highlight_end":37},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet accuracy = $name::accuracy();","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Case where integer fits.","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tlet a = $name::checked_from_integer(42)","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\t\t.expect(\"42 * accuracy <= inner_max; qed\");","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 42 * accuracy);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max integer that fit.","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tlet a = $name::checked_from_integer(inner_max / accuracy)","highlight_start":1,"highlight_end":62},{"text":"\t\t\t\t\t.expect(\"(inner_max / accuracy) * accuracy <= inner_max; qed\");","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tassert_eq!(a.into_inner(), (inner_max / accuracy) * accuracy);","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Case where integer doesn't fit, so it returns `None`.","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\tlet a = $name::checked_from_integer(inner_max / accuracy + 1);","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Case where integer fits.","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tlet a = $name::checked_from_integer(0.saturating_sub(42))","highlight_start":1,"highlight_end":63},{"text":"\t\t\t\t\t\t.expect(\"-42 * accuracy >= inner_min; qed\");","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - 42 * accuracy);","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Min integer that fit.","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\tlet a = $name::checked_from_integer(inner_min / accuracy)","highlight_start":1,"highlight_end":63},{"text":"\t\t\t\t\t\t.expect(\"(inner_min / accuracy) * accuracy <= inner_min; qed\");","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), (inner_min / accuracy) * accuracy);","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Case where integer doesn't fit, so it returns `None`.","highlight_start":1,"highlight_end":62},{"text":"\t\t\t\t\tlet a = $name::checked_from_integer(inner_min / accuracy - 1);","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn from_inner_works() {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(max(), $name::from_inner(inner_max));","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tassert_eq!(min(), $name::from_inner(inner_min));","highlight_start":1,"highlight_end":53},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\t#[should_panic(expected = \"attempt to divide by zero\")]","highlight_start":1,"highlight_end":59},{"text":"\t\t\tfn saturating_from_rational_panics_on_zero_divisor() {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tlet _ = $name::saturating_from_rational(1, 0);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_from_rational_works() {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet accuracy = $name::accuracy();","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Positive case: 2.5","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 25 * accuracy / 10);","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max - 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_max - 1, accuracy);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max - 1);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Min + 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_min + 1, accuracy);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min + 1);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_max, accuracy);","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Min.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_min, accuracy);","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Zero.","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(0, 1);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 0);","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Negative case: -2.5","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(-5, 2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(),  0 - 25 * accuracy / 10);","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Other negative case: -2.5","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(5, -2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - 25 * accuracy / 10);","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Other positive case: 2.5","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(-5, -2);","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 25 * accuracy / 10);","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Max + 1, saturates.","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_max as u128 + 1, accuracy);","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Min - 1, saturates.","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_max as u128 + 2, 0 - accuracy);","highlight_start":1,"highlight_end":83},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_max, 0 - accuracy);","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - inner_max);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_min, 0 - accuracy);","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_min + 1, 0 - accuracy);","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_min, 0 - 1);","highlight_start":1,"highlight_end":64},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_max, 0 - 1);","highlight_start":1,"highlight_end":64},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_max, 0 - inner_max);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - accuracy);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(0 - inner_max, inner_max);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - accuracy);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_max, 0 - 3 * accuracy);","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - inner_max / 3);","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_min, 0 - accuracy / 3);","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(1, 0 - accuracy);","highlight_start":1,"highlight_end":63},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0.saturating_sub(1));","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_min, inner_min);","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), accuracy);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Out of accuracy.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(1, 0 - accuracy - 1);","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0);","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_max - 1, accuracy);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max - 1);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_min + 1, accuracy);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min + 1);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_max, 1);","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_min, 1);","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_max, inner_max);","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tassert_eq!(a.into_inner(), accuracy);","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_max, 3 * accuracy);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max / 3);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_min, 2 * accuracy);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min / 2);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_min, accuracy / 3);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(1, accuracy);","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 1);","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Out of accuracy.","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(1, accuracy + 1);","highlight_start":1,"highlight_end":62},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 0);","highlight_start":1,"highlight_end":35},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn checked_from_rational_works() {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet accuracy = $name::accuracy();","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Divide by zero => None.","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\tlet a = $name::checked_from_rational(1, 0);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max - 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_max - 1, accuracy).unwrap();","highlight_start":1,"highlight_end":76},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max - 1);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Min + 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_min + 1, accuracy).unwrap();","highlight_start":1,"highlight_end":76},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min + 1);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_max, accuracy).unwrap();","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Min.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_min, accuracy).unwrap();","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max + 1 => Overflow => None.","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_min, 0.saturating_sub(accuracy));","highlight_start":1,"highlight_end":81},{"text":"\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Min - 1 => Underflow => None.","highlight_start":1,"highlight_end":38},{"text":"\t\t\t\t\tlet a = $name::checked_from_rational(inner_max as u128 + 2, 0.saturating_sub(accuracy));","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::checked_from_rational(inner_max, 0 - 3 * accuracy).unwrap();","highlight_start":1,"highlight_end":81},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - inner_max / 3);","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::checked_from_rational(inner_min, 0 - accuracy / 3);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::checked_from_rational(1, 0 - accuracy).unwrap();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0.saturating_sub(1));","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::checked_from_rational(1, 0 - accuracy - 1).unwrap();","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0);","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::checked_from_rational(inner_min, accuracy / 3);","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_max, 3 * accuracy).unwrap();","highlight_start":1,"highlight_end":76},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max / 3);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_min, 2 * accuracy).unwrap();","highlight_start":1,"highlight_end":76},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min / 2);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::checked_from_rational(1, accuracy).unwrap();","highlight_start":1,"highlight_end":64},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 1);","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::checked_from_rational(1, accuracy + 1).unwrap();","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 0);","highlight_start":1,"highlight_end":35},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn checked_mul_int_works() {","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(2);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\t// Max - 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tassert_eq!(a.checked_mul_int((i128::max_value() - 1) / 2), Some(i128::max_value() - 1));","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t// Max.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tassert_eq!(a.checked_mul_int(i128::max_value() / 2), Some(i128::max_value() - 1));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t// Max + 1 => None.","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tassert_eq!(a.checked_mul_int(i128::max_value() / 2 + 1), None);","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Min - 1.","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\tassert_eq!(a.checked_mul_int((i128::min_value() + 1) / 2), Some(i128::min_value() + 2));","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t\t// Min.","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\tassert_eq!(a.checked_mul_int(i128::min_value() / 2), Some(i128::min_value()));","highlight_start":1,"highlight_end":84},{"text":"\t\t\t\t\t// Min + 1 => None.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tassert_eq!(a.checked_mul_int(i128::min_value() / 2 - 1), None);","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet b = $name::saturating_from_rational(1, -2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul_int(42i128), Some(-21));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul_int(u128::max_value()), None);","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul_int(i128::max_value()), Some(i128::max_value() / -2));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul_int(i128::min_value()), Some(i128::min_value() / -2));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(1, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tassert_eq!(a.checked_mul_int(42i128), Some(21));","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tassert_eq!(a.checked_mul_int(i128::max_value()), Some(i128::max_value() / 2));","highlight_start":1,"highlight_end":83},{"text":"\t\t\t\tassert_eq!(a.checked_mul_int(i128::min_value()), Some(i128::min_value() / 2));","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet c = $name::saturating_from_integer(255);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tassert_eq!(c.checked_mul_int(2i8), None);","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\tassert_eq!(c.checked_mul_int(2i128), Some(510));","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tassert_eq!(c.checked_mul_int(i128::max_value()), None);","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\tassert_eq!(c.checked_mul_int(i128::min_value()), None);","highlight_start":1,"highlight_end":60},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_mul_int_works() {","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(2);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\t// Max - 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int((i128::max_value() - 1) / 2), i128::max_value() - 1);","highlight_start":1,"highlight_end":90},{"text":"\t\t\t\t// Max.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(i128::max_value() / 2), i128::max_value() - 1);","highlight_start":1,"highlight_end":84},{"text":"\t\t\t\t// Max + 1 => saturates to max.","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(i128::max_value() / 2 + 1), i128::max_value());","highlight_start":1,"highlight_end":84},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Min - 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int((i128::min_value() + 1) / 2), i128::min_value() + 2);","highlight_start":1,"highlight_end":90},{"text":"\t\t\t\t// Min.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(i128::min_value() / 2), i128::min_value());","highlight_start":1,"highlight_end":80},{"text":"\t\t\t\t// Min + 1 => saturates to min.","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(i128::min_value() / 2 - 1), i128::min_value());","highlight_start":1,"highlight_end":84},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet b = $name::saturating_from_rational(1, -2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tassert_eq!(b.saturating_mul_int(42i32), -21);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\t\tassert_eq!(b.saturating_mul_int(i128::max_value()), i128::max_value() / -2);","highlight_start":1,"highlight_end":82},{"text":"\t\t\t\t\tassert_eq!(b.saturating_mul_int(i128::min_value()), i128::min_value() / -2);","highlight_start":1,"highlight_end":82},{"text":"\t\t\t\t\tassert_eq!(b.saturating_mul_int(u128::max_value()), u128::min_value());","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(1, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(42i32), 21);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(i128::max_value()), i128::max_value() / 2);","highlight_start":1,"highlight_end":80},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(i128::min_value()), i128::min_value() / 2);","highlight_start":1,"highlight_end":80},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet c = $name::saturating_from_integer(255);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tassert_eq!(c.saturating_mul_int(2i8), i8::max_value());","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\tassert_eq!(c.saturating_mul_int(-2i8), i8::min_value());","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\tassert_eq!(c.saturating_mul_int(i128::max_value()), i128::max_value());","highlight_start":1,"highlight_end":76},{"text":"\t\t\t\tassert_eq!(c.saturating_mul_int(i128::min_value()), i128::min_value());","highlight_start":1,"highlight_end":76},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn checked_mul_works() {","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(2);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max - 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tlet b = $name::from_inner(inner_max - 1);","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\tassert_eq!(a.checked_mul(&(b/2.into())), Some(b));","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tlet c = $name::from_inner(inner_max);","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\tassert_eq!(a.checked_mul(&(c/2.into())), Some(b));","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max + 1 => None.","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tlet e = $name::from_inner(1);","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tassert_eq!(a.checked_mul(&(c/2.into()+e)), None);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Min + 1.","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\tlet b = $name::from_inner(inner_min + 1) / 2.into();","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\tlet c = $name::from_inner(inner_min + 2);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\t\tassert_eq!(a.checked_mul(&b), Some(c));","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Min.","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\tlet b = $name::from_inner(inner_min) / 2.into();","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\tlet c = $name::from_inner(inner_min);","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\tassert_eq!(a.checked_mul(&b), Some(c));","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Min - 1 => None.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tlet b = $name::from_inner(inner_min) / 2.into() - $name::from_inner(1);","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\t\tassert_eq!(a.checked_mul(&b), None);","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet c = $name::saturating_from_integer(255);","highlight_start":1,"highlight_end":50},{"text":"\t\t\t\t\tlet b = $name::saturating_from_rational(1, -2);","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul(&42.into()), Some(0.saturating_sub(21).into()));","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul(&$name::max_value()), $name::max_value().checked_div(&0.saturating_sub(2).into()));","highlight_start":1,"highlight_end":114},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul(&$name::min_value()), $name::min_value().checked_div(&0.saturating_sub(2).into()));","highlight_start":1,"highlight_end":114},{"text":"\t\t\t\t\tassert_eq!(c.checked_mul(&$name::min_value()), None);","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(1, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tlet c = $name::saturating_from_integer(255);","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(a.checked_mul(&42.into()), Some(21.into()));","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\tassert_eq!(c.checked_mul(&2.into()), Some(510.into()));","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\tassert_eq!(c.checked_mul(&$name::max_value()), None);","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tassert_eq!(a.checked_mul(&$name::max_value()), $name::max_value().checked_div(&2.into()));","highlight_start":1,"highlight_end":95},{"text":"\t\t\t\tassert_eq!(a.checked_mul(&$name::min_value()), $name::min_value().checked_div(&2.into()));","highlight_start":1,"highlight_end":95},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn checked_div_int_works() {","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet accuracy = $name::accuracy();","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::from_inner(inner_max);","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\tlet b = $name::from_inner(inner_min);","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\tlet c = $name::zero();","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tlet d = $name::one();","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tlet e = $name::saturating_from_integer(6);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tlet f = $name::saturating_from_integer(5);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(e.checked_div_int(2.into()), Some(3));","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\tassert_eq!(f.checked_div_int(2.into()), Some(2));","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(a.checked_div_int(i128::max_value()), Some(0));","highlight_start":1,"highlight_end":63},{"text":"\t\t\t\tassert_eq!(a.checked_div_int(2), Some(inner_max / (2 * accuracy)));","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\tassert_eq!(a.checked_div_int(inner_max / accuracy), Some(1));","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!(a.checked_div_int(1i8), None);","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif b < c {","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t// Not executed by unsigned inners.","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\t\tassert_eq!(a.checked_div_int(0.saturating_sub(2)), Some(0.saturating_sub(inner_max / (2 * accuracy))));","highlight_start":1,"highlight_end":109},{"text":"\t\t\t\t\tassert_eq!(a.checked_div_int(0.saturating_sub(inner_max / accuracy)), Some(0.saturating_sub(1)));","highlight_start":1,"highlight_end":103},{"text":"\t\t\t\t\tassert_eq!(b.checked_div_int(i128::min_value()), Some(0));","highlight_start":1,"highlight_end":64},{"text":"\t\t\t\t\tassert_eq!(b.checked_div_int(inner_min / accuracy), Some(1));","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\t\tassert_eq!(b.checked_div_int(1i8), None);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\t\tassert_eq!(b.checked_div_int(0.saturating_sub(2)), Some(0.saturating_sub(inner_min / (2 * accuracy))));","highlight_start":1,"highlight_end":109},{"text":"\t\t\t\t\tassert_eq!(b.checked_div_int(0.saturating_sub(inner_min / accuracy)), Some(0.saturating_sub(1)));","highlight_start":1,"highlight_end":103},{"text":"\t\t\t\t\tassert_eq!(c.checked_div_int(i128::min_value()), Some(0));","highlight_start":1,"highlight_end":64},{"text":"\t\t\t\t\tassert_eq!(d.checked_div_int(i32::min_value()), Some(0));","highlight_start":1,"highlight_end":63},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(b.checked_div_int(2), Some(inner_min / (2 * accuracy)));","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(c.checked_div_int(1), Some(0));","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tassert_eq!(c.checked_div_int(i128::max_value()), Some(0));","highlight_start":1,"highlight_end":63},{"text":"\t\t\t\tassert_eq!(c.checked_div_int(1i8), Some(0));","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(d.checked_div_int(1), Some(1));","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tassert_eq!(d.checked_div_int(i32::max_value()), Some(0));","highlight_start":1,"highlight_end":62},{"text":"\t\t\t\tassert_eq!(d.checked_div_int(1i8), Some(1));","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(a.checked_div_int(0), None);","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\tassert_eq!(b.checked_div_int(0), None);","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\tassert_eq!(c.checked_div_int(0), None);","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\tassert_eq!(d.checked_div_int(0), None);","highlight_start":1,"highlight_end":44},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\t#[should_panic(expected = \"attempt to divide by zero\")]","highlight_start":1,"highlight_end":59},{"text":"\t\t\tfn saturating_div_int_panics_when_divisor_is_zero() {","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\tlet _ = $name::one().saturating_div_int(0);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_div_int_works() {","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet accuracy = $name::accuracy();","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(5);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tassert_eq!(a.saturating_div_int(2), 2);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::min_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(a.saturating_div_int(1i128), (inner_min / accuracy) as i128);","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet a = $name::saturating_from_integer(5);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tassert_eq!(a.saturating_div_int(-2), -2);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::min_value();","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tassert_eq!(a.saturating_div_int(-1i128), (inner_max / accuracy) as i128);","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_abs_works() {","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::from_inner(inner_max).saturating_abs(), $name::max_value());","highlight_start":1,"highlight_end":83},{"text":"\t\t\t\tassert_eq!($name::zero().saturating_abs(), 0.into());","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tassert_eq!($name::from_inner(inner_min).saturating_abs(), $name::max_value());","highlight_start":1,"highlight_end":84},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_rational(-1, 2).saturating_abs(), (1, 2).into());","highlight_start":1,"highlight_end":89},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_mul_acc_int_works() {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\tassert_eq!($name::zero().saturating_mul_acc_int(42i8), 42i8);","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!($name::one().saturating_mul_acc_int(42i8), 2 * 42i8);","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::one().saturating_mul_acc_int(i128::max_value()), i128::max_value());","highlight_start":1,"highlight_end":91},{"text":"\t\t\t\tassert_eq!($name::one().saturating_mul_acc_int(i128::min_value()), i128::min_value());","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::one().saturating_mul_acc_int(u128::max_value() / 2), u128::max_value() - 1);","highlight_start":1,"highlight_end":99},{"text":"\t\t\t\tassert_eq!($name::one().saturating_mul_acc_int(u128::min_value()), u128::min_value());","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(-1, 2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tassert_eq!(a.saturating_mul_acc_int(42i8), 21i8);","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\t\tassert_eq!(a.saturating_mul_acc_int(42u8), 21u8);","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\t\tassert_eq!(a.saturating_mul_acc_int(u128::max_value() - 1), u128::max_value() / 2);","highlight_start":1,"highlight_end":89},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_pow_should_work() {","highlight_start":1,"highlight_end":37},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(0), $name::saturating_from_integer(1));","highlight_start":1,"highlight_end":104},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(1), $name::saturating_from_integer(2));","highlight_start":1,"highlight_end":104},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(2), $name::saturating_from_integer(4));","highlight_start":1,"highlight_end":104},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(3), $name::saturating_from_integer(8));","highlight_start":1,"highlight_end":104},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(50),","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\t\t$name::saturating_from_integer(1125899906842624i64));","highlight_start":1,"highlight_end":59},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(1).saturating_pow(1000), (1).into());","highlight_start":1,"highlight_end":84},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(1).saturating_pow(usize::max_value()), (1).into());","highlight_start":1,"highlight_end":98},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Saturating.","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(68), $name::max_value());","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(-1).saturating_pow(1000), (1).into());","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(-1).saturating_pow(1001), 0.saturating_sub(1).into());","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(-1).saturating_pow(usize::max_value()), 0.saturating_sub(1).into());","highlight_start":1,"highlight_end":116},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(-1).saturating_pow(usize::max_value() - 1), (1).into());","highlight_start":1,"highlight_end":104},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(114209).saturating_pow(5), $name::max_value());","highlight_start":1,"highlight_end":94},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(1).saturating_pow(usize::max_value()), (1).into());","highlight_start":1,"highlight_end":98},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(0).saturating_pow(usize::max_value()), (0).into());","highlight_start":1,"highlight_end":98},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(usize::max_value()), $name::max_value());","highlight_start":1,"highlight_end":106},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn checked_div_works() {","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::from_inner(inner_max);","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\tlet b = $name::from_inner(inner_min);","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\tlet c = $name::zero();","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tlet d = $name::one();","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tlet e = $name::saturating_from_integer(6);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tlet f = $name::saturating_from_integer(5);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(e.checked_div(&2.into()), Some(3.into()));","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tassert_eq!(f.checked_div(&2.into()), Some((5, 2).into()));","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(a.checked_div(&inner_max.into()), Some(1.into()));","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!(a.checked_div(&2.into()), Some($name::from_inner(inner_max / 2)));","highlight_start":1,"highlight_end":82},{"text":"\t\t\t\tassert_eq!(a.checked_div(&$name::max_value()), Some(1.into()));","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\tassert_eq!(a.checked_div(&d), Some(a));","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif b < c {","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t// Not executed by unsigned inners.","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\t\tassert_eq!(a.checked_div(&0.saturating_sub(2).into()), Some($name::from_inner(0.saturating_sub(inner_max / 2))));","highlight_start":1,"highlight_end":119},{"text":"\t\t\t\t\tassert_eq!(a.checked_div(&-$name::max_value()), Some(0.saturating_sub(1).into()));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\tassert_eq!(b.checked_div(&0.saturating_sub(2).into()), Some($name::from_inner(0.saturating_sub(inner_min / 2))));","highlight_start":1,"highlight_end":119},{"text":"\t\t\t\t\tassert_eq!(c.checked_div(&$name::max_value()), Some(0.into()));","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\t\tassert_eq!(b.checked_div(&b), Some($name::one()));","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(b.checked_div(&2.into()), Some($name::from_inner(inner_min / 2)));","highlight_start":1,"highlight_end":82},{"text":"\t\t\t\tassert_eq!(b.checked_div(&a), Some(0.saturating_sub(1).into()));","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tassert_eq!(c.checked_div(&1.into()), Some(0.into()));","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tassert_eq!(d.checked_div(&1.into()), Some(1.into()));","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(a.checked_div(&$name::one()), Some(a));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\tassert_eq!(b.checked_div(&$name::one()), Some(b));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\tassert_eq!(c.checked_div(&$name::one()), Some(c));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\tassert_eq!(d.checked_div(&$name::one()), Some(d));","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(a.checked_div(&$name::zero()), None);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tassert_eq!(b.checked_div(&$name::zero()), None);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tassert_eq!(c.checked_div(&$name::zero()), None);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tassert_eq!(d.checked_div(&$name::zero()), None);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn is_positive_negative_works() {","highlight_start":1,"highlight_end":37},{"text":"\t\t\t\tlet one = $name::one();","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tassert!(one.is_positive());","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert!(!one.is_negative());","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet zero = $name::zero();","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\tassert!(!zero.is_positive());","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tassert!(!zero.is_negative());","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $signed {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\tlet minus_one = $name::saturating_from_integer(-1);","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\t\tassert!(minus_one.is_negative());","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\tassert!(!minus_one.is_positive());","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn trunc_works() {","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(5, 2).trunc();","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\tassert_eq!(n, $name::saturating_from_integer(2));","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet n = $name::saturating_from_rational(-5, 2).trunc();","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\tassert_eq!(n, $name::saturating_from_integer(-2));","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn frac_works() {","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tlet i = n.trunc();","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tlet f = n.frac();","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(n, i + f);","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(5, 2)","highlight_start":1,"highlight_end":50},{"text":"\t\t\t\t\t.frac()","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\t.saturating_mul(10.into());","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\tassert_eq!(n, 5.into());","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(1, 2)","highlight_start":1,"highlight_end":50},{"text":"\t\t\t\t\t.frac()","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\t.saturating_mul(10.into());","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\tassert_eq!(n, 5.into());","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet n = $name::saturating_from_rational(-5, 2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tlet i = n.trunc();","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\tlet f = n.frac();","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tassert_eq!(n, i - f);","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// The sign is attached to the integer part unless it is zero.","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\t\tlet n = $name::saturating_from_rational(-5, 2)","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t\t\t.frac()","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t.saturating_mul(10.into());","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\tassert_eq!(n, 5.into());","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet n = $name::saturating_from_rational(-1, 2)","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t\t\t.frac()","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t.saturating_mul(10.into());","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\tassert_eq!(n, 0.saturating_sub(5).into());","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn ceil_works() {","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tassert_eq!(n.ceil(), 3.into());","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(-5, 2);","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\tassert_eq!(n.ceil(), 0.saturating_sub(2).into());","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// On the limits:","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tlet n = $name::max_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(n.ceil(), n.trunc());","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::min_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(n.ceil(), n.trunc());","highlight_start":1,"highlight_end":37},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn floor_works() {","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tassert_eq!(n.floor(), 2.into());","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(-5, 2);","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\tassert_eq!(n.floor(), 0.saturating_sub(3).into());","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// On the limits:","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tlet n = $name::max_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(n.floor(), n.trunc());","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::min_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(n.floor(), n.trunc());","highlight_start":1,"highlight_end":38},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn round_works() {","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tlet n = $name::zero();","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tassert_eq!(n.round(), n);","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::one();","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tassert_eq!(n.round(), n);","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tassert_eq!(n.round(), 3.into());","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(-5, 2);","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\tassert_eq!(n.round(), 0.saturating_sub(3).into());","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Saturating:","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\tlet n = $name::max_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(n.round(), n.trunc());","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::min_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(n.round(), n.trunc());","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// On the limit:","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// floor(max - 1) + 0.33..","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\tlet n = $name::max_value()","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\t\t.saturating_sub(1.into())","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\t\t.trunc()","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t.saturating_add((1, 3).into());","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(n.round(), ($name::max_value() - 1.into()).trunc());","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// floor(max - 1) + 0.5","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tlet n = $name::max_value()","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\t\t.saturating_sub(1.into())","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\t\t.trunc()","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t.saturating_add((1, 2).into());","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(n.round(), $name::max_value().trunc());","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// floor(min + 1) - 0.33..","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\tlet n = $name::min_value()","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\t\t.saturating_add(1.into())","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\t\t.trunc()","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t.saturating_sub((1, 3).into());","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tassert_eq!(n.round(), ($name::min_value() + 1.into()).trunc());","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// floor(min + 1) - 0.5","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\tlet n = $name::min_value()","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\t\t.saturating_add(1.into())","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\t\t.trunc()","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t.saturating_sub((1, 2).into());","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tassert_eq!(n.round(), $name::min_value().trunc());","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn perthing_into_works() {","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\tlet ten_percent_percent: $name = Percent::from_percent(10).into();","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\tassert_eq!(ten_percent_percent.into_inner(), $name::accuracy() / 10);","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet ten_percent_permill: $name = Permill::from_percent(10).into();","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\tassert_eq!(ten_percent_permill.into_inner(), $name::accuracy() / 10);","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet ten_percent_perbill: $name = Perbill::from_percent(10).into();","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\tassert_eq!(ten_percent_perbill.into_inner(), $name::accuracy() / 10);","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet ten_percent_perquintill: $name = Perquintill::from_percent(10).into();","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\tassert_eq!(ten_percent_perquintill.into_inner(), $name::accuracy() / 10);","highlight_start":1,"highlight_end":78},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn fmt_should_work() {","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tlet zero = $name::zero();","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\tassert_eq!(format!(\"{:?}\", zero), format!(\"{}(0.{:0>weight$})\", stringify!($name), 0, weight=precision()));","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet one = $name::one();","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tassert_eq!(format!(\"{:?}\", one), format!(\"{}(1.{:0>weight$})\", stringify!($name), 0, weight=precision()));","highlight_start":1,"highlight_end":111},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet frac = $name::saturating_from_rational(1, 2);","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\tassert_eq!(format!(\"{:?}\", frac), format!(\"{}(0.{:0<weight$})\", stringify!($name), 5, weight=precision()));","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet frac = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\tassert_eq!(format!(\"{:?}\", frac), format!(\"{}(2.{:0<weight$})\", stringify!($name), 5, weight=precision()));","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet frac = $name::saturating_from_rational(314, 100);","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tassert_eq!(format!(\"{:?}\", frac), format!(\"{}(3.{:0<weight$})\", stringify!($name), 14, weight=precision()));","highlight_start":1,"highlight_end":113},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet neg = -$name::one();","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\tassert_eq!(format!(\"{:?}\", neg), format!(\"{}(-1.{:0>weight$})\", stringify!($name), 0, weight=precision()));","highlight_start":1,"highlight_end":113},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet frac = $name::saturating_from_rational(-314, 100);","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\tassert_eq!(format!(\"{:?}\", frac), format!(\"{}(-3.{:0<weight$})\", stringify!($name), 14, weight=precision()));","highlight_start":1,"highlight_end":115},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0282]\u001b[0m\u001b[0m\u001b[1m: type annotations needed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/zb/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.0/src/fixed_point.rs:541:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m541\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                let accuracy = P::ACCURACY.saturated_into();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconsider giving `accuracy` a type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1595\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimplement_fixed!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1596\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    FixedI64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1597\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    test_fixed_i64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1598\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    i64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1601\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \"_Fixed Point 64 bits signed, range = [-9223372036.854775808, 9223372036.854775807]_\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1602\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `implement_fixed` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"type annotations needed","code":{"code":"E0282","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0282\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nApart from a method or function with a generic type parameter, this error can\noccur when a type parameter of a struct or trait cannot be inferred. In that\ncase it is not always possible to use a type annotation, because all candidates\nhave the same return type. For instance:\n\n```compile_fail,E0282\nstruct Foo<T> {\n    num: T,\n}\n\nimpl<T> Foo<T> {\n    fn bar() -> i32 {\n        0\n    }\n\n    fn baz() {\n        let number = Foo::bar();\n    }\n}\n```\n\nThis will fail because the compiler does not know which instance of `Foo` to\ncall `bar` on. Change `Foo::bar()` to `Foo::<T>::bar()` to resolve the error.\n"},"level":"error","spans":[{"file_name":"/home/zb/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.0/src/fixed_point.rs","byte_start":15827,"byte_end":15835,"line_start":541,"line_end":541,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"\t\t\t\tlet accuracy = P::ACCURACY.saturated_into();","highlight_start":9,"highlight_end":17}],"label":"consider giving `accuracy` a type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/zb/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.0/src/fixed_point.rs","byte_start":51139,"byte_end":51364,"line_start":1604,"line_end":1612,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"implement_fixed!(","highlight_start":1,"highlight_end":18},{"text":"\tFixedI128,","highlight_start":1,"highlight_end":12},{"text":"\ttest_fixed_i128,","highlight_start":1,"highlight_end":18},{"text":"\ti128,","highlight_start":1,"highlight_end":7},{"text":"\ttrue,","highlight_start":1,"highlight_end":7},{"text":"\t1_000_000_000_000_000_000,","highlight_start":1,"highlight_end":28},{"text":"\t\"_Fixed Point 128 bits signed, range = \\","highlight_start":1,"highlight_end":42},{"text":"\t\t[-170141183460469231731.687303715884105728, 170141183460469231731.687303715884105727]_\",","highlight_start":1,"highlight_end":91},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"implement_fixed!","def_site_span":{"file_name":"/home/zb/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.0/src/fixed_point.rs","byte_start":10752,"byte_end":50970,"line_start":333,"line_end":1593,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! implement_fixed {","highlight_start":1,"highlight_end":31},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$name:ident,","highlight_start":1,"highlight_end":15},{"text":"\t\t$test_mod:ident,","highlight_start":1,"highlight_end":19},{"text":"\t\t$inner_type:ty,","highlight_start":1,"highlight_end":18},{"text":"\t\t$signed:tt,","highlight_start":1,"highlight_end":14},{"text":"\t\t$div:tt,","highlight_start":1,"highlight_end":11},{"text":"\t\t$title:expr $(,)?","highlight_start":1,"highlight_end":20},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// A fixed point number representation in the range.","highlight_start":1,"highlight_end":56},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t#[doc = $title]","highlight_start":1,"highlight_end":18},{"text":"\t\t#[derive(Encode, Decode, Default, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]","highlight_start":1,"highlight_end":82},{"text":"\t\tpub struct $name($inner_type);","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl From<$inner_type> for $name {","highlight_start":1,"highlight_end":37},{"text":"\t\t\tfn from(int: $inner_type) -> Self {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$name::saturating_from_integer(int)","highlight_start":1,"highlight_end":40},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<N: FixedPointOperand, D: FixedPointOperand> From<(N, D)> for $name {","highlight_start":1,"highlight_end":76},{"text":"\t\t\tfn from(r: (N, D)) -> Self {","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t$name::saturating_from_rational(r.0, r.1)","highlight_start":1,"highlight_end":46},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl FixedPointNumber for $name {","highlight_start":1,"highlight_end":36},{"text":"\t\t\ttype Inner = $inner_type;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tconst DIV: Self::Inner = $div;","highlight_start":1,"highlight_end":34},{"text":"\t\t\tconst SIGNED: bool = $signed;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn from_inner(inner: Self::Inner) -> Self {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tSelf(inner)","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn into_inner(self) -> Self::Inner {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tself.0","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl $name {","highlight_start":1,"highlight_end":15},{"text":"\t\t\t/// const version of `FixedPointNumber::from_inner`.","highlight_start":1,"highlight_end":56},{"text":"\t\t\tpub const fn from_inner(inner: $inner_type) -> Self {","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\tSelf(inner)","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[cfg(any(feature = \"std\", test))]","highlight_start":1,"highlight_end":38},{"text":"\t\t\tpub fn from_fraction(x: f64) -> Self {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\tSelf((x * (<Self as FixedPointNumber>::DIV as f64)) as $inner_type)","highlight_start":1,"highlight_end":72},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[cfg(any(feature = \"std\", test))]","highlight_start":1,"highlight_end":38},{"text":"\t\t\tpub fn to_fraction(self) -> f64 {","highlight_start":1,"highlight_end":37},{"text":"\t\t\t\tself.0 as f64 / <Self as FixedPointNumber>::DIV as f64","highlight_start":1,"highlight_end":59},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl Saturating for $name {","highlight_start":1,"highlight_end":30},{"text":"\t\t\tfn saturating_add(self, rhs: Self) -> Self {","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tSelf(self.0.saturating_add(rhs.0))","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn saturating_sub(self, rhs: Self) -> Self {","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tSelf(self.0.saturating_sub(rhs.0))","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn saturating_mul(self, rhs: Self) -> Self {","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tself.checked_mul(&rhs).unwrap_or_else(|| to_bound(self.0, rhs.0))","highlight_start":1,"highlight_end":70},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn saturating_pow(self, exp: usize) -> Self {","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tif exp == 0 {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\treturn Self::saturating_from_integer(1);","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet exp = exp as u32;","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tlet msb_pos = 32 - exp.leading_zeros();","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet mut result = Self::saturating_from_integer(1);","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\tlet mut pow_val = self;","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tfor i in 0..msb_pos {","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t\tif ((1 << i) & exp) > 0 {","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\t\t\tresult = result.saturating_mul(pow_val);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\t\t}","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\tpow_val = pow_val.saturating_mul(pow_val);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tresult","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl ops::Neg for $name {","highlight_start":1,"highlight_end":28},{"text":"\t\t\ttype Output = Self;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn neg(self) -> Self::Output {","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tSelf(<Self as FixedPointNumber>::Inner::zero() - self.0)","highlight_start":1,"highlight_end":61},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl ops::Add for $name {","highlight_start":1,"highlight_end":28},{"text":"\t\t\ttype Output = Self;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn add(self, rhs: Self) -> Self::Output {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tSelf(self.0 + rhs.0)","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl ops::Sub for $name {","highlight_start":1,"highlight_end":28},{"text":"\t\t\ttype Output = Self;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn sub(self, rhs: Self) -> Self::Output {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tSelf(self.0 - rhs.0)","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl ops::Mul for $name {","highlight_start":1,"highlight_end":28},{"text":"\t\t\ttype Output = Self;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn mul(self, rhs: Self) -> Self::Output {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tself.checked_mul(&rhs)","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t.unwrap_or_else(|| panic!(\"attempt to multiply with overflow\"))","highlight_start":1,"highlight_end":69},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl ops::Div for $name {","highlight_start":1,"highlight_end":28},{"text":"\t\t\ttype Output = Self;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn div(self, rhs: Self) -> Self::Output {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tif rhs.0 == 0 {","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\tpanic!(\"attempt to divide by zero\")","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tself.checked_div(&rhs)","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t.unwrap_or_else(|| panic!(\"attempt to divide with overflow\"))","highlight_start":1,"highlight_end":67},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl CheckedSub for $name {","highlight_start":1,"highlight_end":30},{"text":"\t\t\tfn checked_sub(&self, rhs: &Self) -> Option<Self> {","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\tself.0.checked_sub(rhs.0).map(Self)","highlight_start":1,"highlight_end":40},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl CheckedAdd for $name {","highlight_start":1,"highlight_end":30},{"text":"\t\t\tfn checked_add(&self, rhs: &Self) -> Option<Self> {","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\tself.0.checked_add(rhs.0).map(Self)","highlight_start":1,"highlight_end":40},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl CheckedDiv for $name {","highlight_start":1,"highlight_end":30},{"text":"\t\t\tfn checked_div(&self, other: &Self) -> Option<Self> {","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\tif other.0 == 0 {","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\treturn None","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet lhs: I129 = self.0.into();","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\tlet rhs: I129 = other.0.into();","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\tlet negative = lhs.negative != rhs.negative;","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tmultiply_by_rational(lhs.value, Self::DIV as u128, rhs.value).ok()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\t\t.and_then(|value| from_i129(I129 { value, negative }))","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t.map(Self)","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl CheckedMul for $name {","highlight_start":1,"highlight_end":30},{"text":"\t\t\tfn checked_mul(&self, other: &Self) -> Option<Self> {","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\tlet lhs: I129 = self.0.into();","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\tlet rhs: I129 = other.0.into();","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\tlet negative = lhs.negative != rhs.negative;","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tmultiply_by_rational(lhs.value, rhs.value, Self::DIV as u128).ok()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\t\t.and_then(|value| from_i129(I129 { value, negative }))","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t.map(Self)","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl Bounded for $name {","highlight_start":1,"highlight_end":27},{"text":"\t\t\tfn min_value() -> Self {","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tSelf(<Self as FixedPointNumber>::Inner::min_value())","highlight_start":1,"highlight_end":57},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn max_value() -> Self {","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tSelf(<Self as FixedPointNumber>::Inner::max_value())","highlight_start":1,"highlight_end":57},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl sp_std::fmt::Debug for $name {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":27},{"text":"\t\t\tfn fmt(&self, f: &mut sp_std::fmt::Formatter) -> sp_std::fmt::Result {","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\tlet integral = {","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\tlet int = self.0 / Self::accuracy();","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t\tlet signum_for_zero = if int == 0 && self.is_negative() { \"-\" } else { \"\" };","highlight_start":1,"highlight_end":82},{"text":"\t\t\t\t\tformat!(\"{}{}\", signum_for_zero, int)","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\tlet precision = (Self::accuracy() as f64).log10() as usize;","highlight_start":1,"highlight_end":64},{"text":"\t\t\t\tlet fractional = format!(\"{:0>weight$}\", ((self.0 % Self::accuracy()) as i128).abs(), weight=precision);","highlight_start":1,"highlight_end":109},{"text":"\t\t\t\twrite!(f, \"{}({}.{})\", stringify!($name), integral, fractional)","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[cfg(not(feature = \"std\"))]","highlight_start":1,"highlight_end":32},{"text":"\t\t\tfn fmt(&self, _: &mut sp_std::fmt::Formatter) -> sp_std::fmt::Result {","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\tOk(())","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<P: PerThing> From<P> for $name {","highlight_start":1,"highlight_end":40},{"text":"\t\t\tfn from(p: P) -> Self {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tlet accuracy = P::ACCURACY.saturated_into();","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tlet value = p.deconstruct().saturated_into();","highlight_start":1,"highlight_end":50},{"text":"\t\t\t\t$name::saturating_from_rational(value, accuracy)","highlight_start":1,"highlight_end":53},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl sp_std::fmt::Display for $name {","highlight_start":1,"highlight_end":40},{"text":"\t\t\tfn fmt(&self, f: &mut sp_std::fmt::Formatter) -> sp_std::fmt::Result {","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\twrite!(f, \"{}\", self.0)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl sp_std::str::FromStr for $name {","highlight_start":1,"highlight_end":40},{"text":"\t\t\ttype Err = &'static str;","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn from_str(s: &str) -> Result<Self, Self::Err> {","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tlet inner: <Self as FixedPointNumber>::Inner = s.parse()","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t.map_err(|_| \"invalid string input for fixed point number\")?;","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tOk(Self::from_inner(inner))","highlight_start":1,"highlight_end":32},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Manual impl `Serialize` as serde_json does not support i128.","highlight_start":1,"highlight_end":66},{"text":"\t\t// TODO: remove impl if issue https://github.com/serde-rs/json/issues/548 fixed.","highlight_start":1,"highlight_end":83},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl Serialize for $name {","highlight_start":1,"highlight_end":29},{"text":"\t\t\tfn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>","highlight_start":1,"highlight_end":68},{"text":"\t\t\twhere","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\tS: Serializer,","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tserializer.serialize_str(&self.to_string())","highlight_start":1,"highlight_end":48},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Manual impl `Deserialize` as serde_json does not support i128.","highlight_start":1,"highlight_end":68},{"text":"\t\t// TODO: remove impl if issue https://github.com/serde-rs/json/issues/548 fixed.","highlight_start":1,"highlight_end":83},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<'de> Deserialize<'de> for $name {","highlight_start":1,"highlight_end":41},{"text":"\t\t\tfn deserialize<D>(deserializer: D) -> Result<Self, D::Error>","highlight_start":1,"highlight_end":64},{"text":"\t\t\twhere","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\tD: Deserializer<'de>,","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tuse sp_std::str::FromStr;","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\tlet s = String::deserialize(deserializer)?;","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t$name::from_str(&s).map_err(|err_str| de::Error::custom(err_str))","highlight_start":1,"highlight_end":70},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t#[cfg(test)]","highlight_start":1,"highlight_end":15},{"text":"\t\tmod $test_mod {","highlight_start":1,"highlight_end":18},{"text":"\t\t\tuse super::*;","highlight_start":1,"highlight_end":17},{"text":"\t\t\tuse crate::{Perbill, Percent, Permill, Perquintill};","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn max() -> $name {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t$name::max_value()","highlight_start":1,"highlight_end":23},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn min() -> $name {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t$name::min_value()","highlight_start":1,"highlight_end":23},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn precision() -> usize {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t($name::accuracy() as f64).log10() as usize","highlight_start":1,"highlight_end":48},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn macro_preconditions() {","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\tassert!($name::DIV > 0);","highlight_start":1,"highlight_end":29},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn from_i129_works() {","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tlet a = I129 {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tvalue: 1,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\tnegative: true,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Can't convert negative number to unsigned.","highlight_start":1,"highlight_end":50},{"text":"\t\t\t\tassert_eq!(from_i129::<u128>(a), None);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = I129 {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tvalue: u128::max_value() - 1,","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\tnegative: false,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max - 1 value fits.","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tassert_eq!(from_i129::<u128>(a), Some(u128::max_value() - 1));","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = I129 {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tvalue: u128::max_value(),","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\t\tnegative: false,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max value fits.","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tassert_eq!(from_i129::<u128>(a), Some(u128::max_value()));","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = I129 {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tvalue: i128::max_value() as u128 + 1,","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\tnegative: true,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Min value fits.","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tassert_eq!(from_i129::<i128>(a), Some(i128::min_value()));","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = I129 {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tvalue: i128::max_value() as u128 + 1,","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\tnegative: false,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max + 1 does not fit.","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tassert_eq!(from_i129::<i128>(a), None);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = I129 {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tvalue: i128::max_value() as u128,","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\tnegative: false,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max value fits.","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tassert_eq!(from_i129::<i128>(a), Some(i128::max_value()));","highlight_start":1,"highlight_end":63},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn to_bound_works() {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\tlet a = 1i32;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\tlet b = 1i32;","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Pos + Pos => Max.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\tassert_eq!(to_bound::<_, _, i32>(a, b), i32::max_value());","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = -1i32;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\tlet b = -1i32;","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Neg + Neg => Max.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\tassert_eq!(to_bound::<_, _, i32>(a, b), i32::max_value());","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = 1i32;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\tlet b = -1i32;","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Pos + Neg => Min.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\tassert_eq!(to_bound::<_, _, i32>(a, b), i32::min_value());","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = -1i32;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\tlet b = 1i32;","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Neg + Pos => Min.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\tassert_eq!(to_bound::<_, _, i32>(a, b), i32::min_value());","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = 1i32;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\tlet b = -1i32;","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Pos + Neg => Min (unsigned).","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\tassert_eq!(to_bound::<_, _, u32>(a, b), 0);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_neg_works() {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tlet a = $name::zero();","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tlet b = -a;","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Zero.","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\tassert_eq!(a, b);","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet a = $name::saturating_from_integer(5);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tlet b = -a;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Positive.","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(-5), b);","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_integer(-5);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\tlet b = -a;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Negative","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(5), b);","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::max_value();","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tlet b = -a;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Max.","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\tassert_eq!($name::min_value() + $name::from_inner(1), b);","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::min_value() + $name::from_inner(1);","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\tlet b = -a;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Min.","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\tassert_eq!($name::max_value(), b);","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_checked_add_overflow_works() {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tlet a = $name::max_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tlet b = 1.into();","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tassert!(a.checked_add(&b).is_none());","highlight_start":1,"highlight_end":42},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_add_works() {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tlet b = $name::saturating_from_rational(1, 2);","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Positive case: 6/2 = 3.","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(3), a + b);","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Negative case: 4/2 = 2.","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\tlet b = $name::saturating_from_rational(1, -2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(2), a + b);","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_checked_sub_underflow_works() {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tlet a = $name::min_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tlet b = 1.into();","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tassert!(a.checked_sub(&b).is_none());","highlight_start":1,"highlight_end":42},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_sub_works() {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tlet b = $name::saturating_from_rational(1, 2);","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2), a - b);","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(-2), b.saturating_sub(a));","highlight_start":1,"highlight_end":73},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_checked_mul_overflow_works() {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tlet a = $name::max_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tlet b = 2.into();","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tassert!(a.checked_mul(&b).is_none());","highlight_start":1,"highlight_end":42},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_mul_works() {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(42);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tlet b = $name::saturating_from_integer(2);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(84), a * b);","highlight_start":1,"highlight_end":59},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(42);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tlet b = $name::saturating_from_integer(-2);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(-84), a * b);","highlight_start":1,"highlight_end":60},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\t#[should_panic(expected = \"attempt to divide by zero\")]","highlight_start":1,"highlight_end":59},{"text":"\t\t\tfn op_div_panics_on_zero_divisor() {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(1);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tlet b = 0.into();","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tlet _c = a / b;","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_checked_div_overflow_works() {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet a = $name::min_value();","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tlet b = $name::zero().saturating_sub($name::one());","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\t\tassert!(a.checked_div(&b).is_none());","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_div_works() {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(42);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tlet b = $name::saturating_from_integer(2);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(21), a / b);","highlight_start":1,"highlight_end":59},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet a = $name::saturating_from_integer(42);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\tlet b = $name::saturating_from_integer(-2);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(-21), a / b);","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_from_integer_works() {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet accuracy = $name::accuracy();","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Cases where integer fits.","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(42);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 42 * accuracy);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(-42);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 0.saturating_sub(42 * accuracy));","highlight_start":1,"highlight_end":65},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max/min integers that fit.","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(inner_max / accuracy);","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!(a.into_inner(), (inner_max / accuracy) * accuracy);","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(inner_min / accuracy);","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!(a.into_inner(), (inner_min / accuracy) * accuracy);","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Cases where integer doesn't fit, so it saturates.","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(inner_max / accuracy + 1);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_integer((inner_min / accuracy).saturating_sub(1));","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":43},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn checked_from_integer_works() {","highlight_start":1,"highlight_end":37},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet accuracy = $name::accuracy();","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Case where integer fits.","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tlet a = $name::checked_from_integer(42)","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\t\t.expect(\"42 * accuracy <= inner_max; qed\");","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 42 * accuracy);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max integer that fit.","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tlet a = $name::checked_from_integer(inner_max / accuracy)","highlight_start":1,"highlight_end":62},{"text":"\t\t\t\t\t.expect(\"(inner_max / accuracy) * accuracy <= inner_max; qed\");","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tassert_eq!(a.into_inner(), (inner_max / accuracy) * accuracy);","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Case where integer doesn't fit, so it returns `None`.","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\tlet a = $name::checked_from_integer(inner_max / accuracy + 1);","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Case where integer fits.","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tlet a = $name::checked_from_integer(0.saturating_sub(42))","highlight_start":1,"highlight_end":63},{"text":"\t\t\t\t\t\t.expect(\"-42 * accuracy >= inner_min; qed\");","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - 42 * accuracy);","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Min integer that fit.","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\tlet a = $name::checked_from_integer(inner_min / accuracy)","highlight_start":1,"highlight_end":63},{"text":"\t\t\t\t\t\t.expect(\"(inner_min / accuracy) * accuracy <= inner_min; qed\");","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), (inner_min / accuracy) * accuracy);","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Case where integer doesn't fit, so it returns `None`.","highlight_start":1,"highlight_end":62},{"text":"\t\t\t\t\tlet a = $name::checked_from_integer(inner_min / accuracy - 1);","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn from_inner_works() {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(max(), $name::from_inner(inner_max));","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tassert_eq!(min(), $name::from_inner(inner_min));","highlight_start":1,"highlight_end":53},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\t#[should_panic(expected = \"attempt to divide by zero\")]","highlight_start":1,"highlight_end":59},{"text":"\t\t\tfn saturating_from_rational_panics_on_zero_divisor() {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tlet _ = $name::saturating_from_rational(1, 0);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_from_rational_works() {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet accuracy = $name::accuracy();","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Positive case: 2.5","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 25 * accuracy / 10);","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max - 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_max - 1, accuracy);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max - 1);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Min + 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_min + 1, accuracy);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min + 1);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_max, accuracy);","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Min.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_min, accuracy);","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Zero.","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(0, 1);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 0);","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Negative case: -2.5","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(-5, 2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(),  0 - 25 * accuracy / 10);","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Other negative case: -2.5","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(5, -2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - 25 * accuracy / 10);","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Other positive case: 2.5","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(-5, -2);","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 25 * accuracy / 10);","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Max + 1, saturates.","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_max as u128 + 1, accuracy);","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Min - 1, saturates.","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_max as u128 + 2, 0 - accuracy);","highlight_start":1,"highlight_end":83},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_max, 0 - accuracy);","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - inner_max);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_min, 0 - accuracy);","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_min + 1, 0 - accuracy);","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_min, 0 - 1);","highlight_start":1,"highlight_end":64},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_max, 0 - 1);","highlight_start":1,"highlight_end":64},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_max, 0 - inner_max);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - accuracy);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(0 - inner_max, inner_max);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - accuracy);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_max, 0 - 3 * accuracy);","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - inner_max / 3);","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_min, 0 - accuracy / 3);","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(1, 0 - accuracy);","highlight_start":1,"highlight_end":63},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0.saturating_sub(1));","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_min, inner_min);","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), accuracy);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Out of accuracy.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(1, 0 - accuracy - 1);","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0);","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_max - 1, accuracy);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max - 1);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_min + 1, accuracy);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min + 1);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_max, 1);","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_min, 1);","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_max, inner_max);","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tassert_eq!(a.into_inner(), accuracy);","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_max, 3 * accuracy);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max / 3);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_min, 2 * accuracy);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min / 2);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_min, accuracy / 3);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(1, accuracy);","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 1);","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Out of accuracy.","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(1, accuracy + 1);","highlight_start":1,"highlight_end":62},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 0);","highlight_start":1,"highlight_end":35},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn checked_from_rational_works() {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet accuracy = $name::accuracy();","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Divide by zero => None.","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\tlet a = $name::checked_from_rational(1, 0);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max - 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_max - 1, accuracy).unwrap();","highlight_start":1,"highlight_end":76},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max - 1);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Min + 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_min + 1, accuracy).unwrap();","highlight_start":1,"highlight_end":76},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min + 1);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_max, accuracy).unwrap();","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Min.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_min, accuracy).unwrap();","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max + 1 => Overflow => None.","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_min, 0.saturating_sub(accuracy));","highlight_start":1,"highlight_end":81},{"text":"\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Min - 1 => Underflow => None.","highlight_start":1,"highlight_end":38},{"text":"\t\t\t\t\tlet a = $name::checked_from_rational(inner_max as u128 + 2, 0.saturating_sub(accuracy));","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::checked_from_rational(inner_max, 0 - 3 * accuracy).unwrap();","highlight_start":1,"highlight_end":81},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - inner_max / 3);","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::checked_from_rational(inner_min, 0 - accuracy / 3);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::checked_from_rational(1, 0 - accuracy).unwrap();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0.saturating_sub(1));","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::checked_from_rational(1, 0 - accuracy - 1).unwrap();","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0);","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::checked_from_rational(inner_min, accuracy / 3);","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_max, 3 * accuracy).unwrap();","highlight_start":1,"highlight_end":76},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max / 3);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_min, 2 * accuracy).unwrap();","highlight_start":1,"highlight_end":76},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min / 2);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::checked_from_rational(1, accuracy).unwrap();","highlight_start":1,"highlight_end":64},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 1);","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::checked_from_rational(1, accuracy + 1).unwrap();","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 0);","highlight_start":1,"highlight_end":35},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn checked_mul_int_works() {","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(2);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\t// Max - 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tassert_eq!(a.checked_mul_int((i128::max_value() - 1) / 2), Some(i128::max_value() - 1));","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t// Max.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tassert_eq!(a.checked_mul_int(i128::max_value() / 2), Some(i128::max_value() - 1));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t// Max + 1 => None.","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tassert_eq!(a.checked_mul_int(i128::max_value() / 2 + 1), None);","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Min - 1.","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\tassert_eq!(a.checked_mul_int((i128::min_value() + 1) / 2), Some(i128::min_value() + 2));","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t\t// Min.","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\tassert_eq!(a.checked_mul_int(i128::min_value() / 2), Some(i128::min_value()));","highlight_start":1,"highlight_end":84},{"text":"\t\t\t\t\t// Min + 1 => None.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tassert_eq!(a.checked_mul_int(i128::min_value() / 2 - 1), None);","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet b = $name::saturating_from_rational(1, -2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul_int(42i128), Some(-21));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul_int(u128::max_value()), None);","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul_int(i128::max_value()), Some(i128::max_value() / -2));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul_int(i128::min_value()), Some(i128::min_value() / -2));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(1, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tassert_eq!(a.checked_mul_int(42i128), Some(21));","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tassert_eq!(a.checked_mul_int(i128::max_value()), Some(i128::max_value() / 2));","highlight_start":1,"highlight_end":83},{"text":"\t\t\t\tassert_eq!(a.checked_mul_int(i128::min_value()), Some(i128::min_value() / 2));","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet c = $name::saturating_from_integer(255);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tassert_eq!(c.checked_mul_int(2i8), None);","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\tassert_eq!(c.checked_mul_int(2i128), Some(510));","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tassert_eq!(c.checked_mul_int(i128::max_value()), None);","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\tassert_eq!(c.checked_mul_int(i128::min_value()), None);","highlight_start":1,"highlight_end":60},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_mul_int_works() {","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(2);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\t// Max - 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int((i128::max_value() - 1) / 2), i128::max_value() - 1);","highlight_start":1,"highlight_end":90},{"text":"\t\t\t\t// Max.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(i128::max_value() / 2), i128::max_value() - 1);","highlight_start":1,"highlight_end":84},{"text":"\t\t\t\t// Max + 1 => saturates to max.","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(i128::max_value() / 2 + 1), i128::max_value());","highlight_start":1,"highlight_end":84},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Min - 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int((i128::min_value() + 1) / 2), i128::min_value() + 2);","highlight_start":1,"highlight_end":90},{"text":"\t\t\t\t// Min.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(i128::min_value() / 2), i128::min_value());","highlight_start":1,"highlight_end":80},{"text":"\t\t\t\t// Min + 1 => saturates to min.","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(i128::min_value() / 2 - 1), i128::min_value());","highlight_start":1,"highlight_end":84},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet b = $name::saturating_from_rational(1, -2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tassert_eq!(b.saturating_mul_int(42i32), -21);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\t\tassert_eq!(b.saturating_mul_int(i128::max_value()), i128::max_value() / -2);","highlight_start":1,"highlight_end":82},{"text":"\t\t\t\t\tassert_eq!(b.saturating_mul_int(i128::min_value()), i128::min_value() / -2);","highlight_start":1,"highlight_end":82},{"text":"\t\t\t\t\tassert_eq!(b.saturating_mul_int(u128::max_value()), u128::min_value());","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(1, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(42i32), 21);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(i128::max_value()), i128::max_value() / 2);","highlight_start":1,"highlight_end":80},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(i128::min_value()), i128::min_value() / 2);","highlight_start":1,"highlight_end":80},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet c = $name::saturating_from_integer(255);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tassert_eq!(c.saturating_mul_int(2i8), i8::max_value());","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\tassert_eq!(c.saturating_mul_int(-2i8), i8::min_value());","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\tassert_eq!(c.saturating_mul_int(i128::max_value()), i128::max_value());","highlight_start":1,"highlight_end":76},{"text":"\t\t\t\tassert_eq!(c.saturating_mul_int(i128::min_value()), i128::min_value());","highlight_start":1,"highlight_end":76},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn checked_mul_works() {","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(2);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max - 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tlet b = $name::from_inner(inner_max - 1);","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\tassert_eq!(a.checked_mul(&(b/2.into())), Some(b));","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tlet c = $name::from_inner(inner_max);","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\tassert_eq!(a.checked_mul(&(c/2.into())), Some(b));","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max + 1 => None.","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tlet e = $name::from_inner(1);","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tassert_eq!(a.checked_mul(&(c/2.into()+e)), None);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Min + 1.","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\tlet b = $name::from_inner(inner_min + 1) / 2.into();","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\tlet c = $name::from_inner(inner_min + 2);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\t\tassert_eq!(a.checked_mul(&b), Some(c));","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Min.","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\tlet b = $name::from_inner(inner_min) / 2.into();","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\tlet c = $name::from_inner(inner_min);","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\tassert_eq!(a.checked_mul(&b), Some(c));","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Min - 1 => None.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tlet b = $name::from_inner(inner_min) / 2.into() - $name::from_inner(1);","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\t\tassert_eq!(a.checked_mul(&b), None);","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet c = $name::saturating_from_integer(255);","highlight_start":1,"highlight_end":50},{"text":"\t\t\t\t\tlet b = $name::saturating_from_rational(1, -2);","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul(&42.into()), Some(0.saturating_sub(21).into()));","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul(&$name::max_value()), $name::max_value().checked_div(&0.saturating_sub(2).into()));","highlight_start":1,"highlight_end":114},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul(&$name::min_value()), $name::min_value().checked_div(&0.saturating_sub(2).into()));","highlight_start":1,"highlight_end":114},{"text":"\t\t\t\t\tassert_eq!(c.checked_mul(&$name::min_value()), None);","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(1, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tlet c = $name::saturating_from_integer(255);","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(a.checked_mul(&42.into()), Some(21.into()));","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\tassert_eq!(c.checked_mul(&2.into()), Some(510.into()));","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\tassert_eq!(c.checked_mul(&$name::max_value()), None);","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tassert_eq!(a.checked_mul(&$name::max_value()), $name::max_value().checked_div(&2.into()));","highlight_start":1,"highlight_end":95},{"text":"\t\t\t\tassert_eq!(a.checked_mul(&$name::min_value()), $name::min_value().checked_div(&2.into()));","highlight_start":1,"highlight_end":95},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn checked_div_int_works() {","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet accuracy = $name::accuracy();","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::from_inner(inner_max);","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\tlet b = $name::from_inner(inner_min);","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\tlet c = $name::zero();","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tlet d = $name::one();","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tlet e = $name::saturating_from_integer(6);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tlet f = $name::saturating_from_integer(5);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(e.checked_div_int(2.into()), Some(3));","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\tassert_eq!(f.checked_div_int(2.into()), Some(2));","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(a.checked_div_int(i128::max_value()), Some(0));","highlight_start":1,"highlight_end":63},{"text":"\t\t\t\tassert_eq!(a.checked_div_int(2), Some(inner_max / (2 * accuracy)));","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\tassert_eq!(a.checked_div_int(inner_max / accuracy), Some(1));","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!(a.checked_div_int(1i8), None);","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif b < c {","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t// Not executed by unsigned inners.","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\t\tassert_eq!(a.checked_div_int(0.saturating_sub(2)), Some(0.saturating_sub(inner_max / (2 * accuracy))));","highlight_start":1,"highlight_end":109},{"text":"\t\t\t\t\tassert_eq!(a.checked_div_int(0.saturating_sub(inner_max / accuracy)), Some(0.saturating_sub(1)));","highlight_start":1,"highlight_end":103},{"text":"\t\t\t\t\tassert_eq!(b.checked_div_int(i128::min_value()), Some(0));","highlight_start":1,"highlight_end":64},{"text":"\t\t\t\t\tassert_eq!(b.checked_div_int(inner_min / accuracy), Some(1));","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\t\tassert_eq!(b.checked_div_int(1i8), None);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\t\tassert_eq!(b.checked_div_int(0.saturating_sub(2)), Some(0.saturating_sub(inner_min / (2 * accuracy))));","highlight_start":1,"highlight_end":109},{"text":"\t\t\t\t\tassert_eq!(b.checked_div_int(0.saturating_sub(inner_min / accuracy)), Some(0.saturating_sub(1)));","highlight_start":1,"highlight_end":103},{"text":"\t\t\t\t\tassert_eq!(c.checked_div_int(i128::min_value()), Some(0));","highlight_start":1,"highlight_end":64},{"text":"\t\t\t\t\tassert_eq!(d.checked_div_int(i32::min_value()), Some(0));","highlight_start":1,"highlight_end":63},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(b.checked_div_int(2), Some(inner_min / (2 * accuracy)));","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(c.checked_div_int(1), Some(0));","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tassert_eq!(c.checked_div_int(i128::max_value()), Some(0));","highlight_start":1,"highlight_end":63},{"text":"\t\t\t\tassert_eq!(c.checked_div_int(1i8), Some(0));","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(d.checked_div_int(1), Some(1));","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tassert_eq!(d.checked_div_int(i32::max_value()), Some(0));","highlight_start":1,"highlight_end":62},{"text":"\t\t\t\tassert_eq!(d.checked_div_int(1i8), Some(1));","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(a.checked_div_int(0), None);","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\tassert_eq!(b.checked_div_int(0), None);","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\tassert_eq!(c.checked_div_int(0), None);","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\tassert_eq!(d.checked_div_int(0), None);","highlight_start":1,"highlight_end":44},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\t#[should_panic(expected = \"attempt to divide by zero\")]","highlight_start":1,"highlight_end":59},{"text":"\t\t\tfn saturating_div_int_panics_when_divisor_is_zero() {","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\tlet _ = $name::one().saturating_div_int(0);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_div_int_works() {","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet accuracy = $name::accuracy();","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(5);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tassert_eq!(a.saturating_div_int(2), 2);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::min_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(a.saturating_div_int(1i128), (inner_min / accuracy) as i128);","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet a = $name::saturating_from_integer(5);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tassert_eq!(a.saturating_div_int(-2), -2);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::min_value();","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tassert_eq!(a.saturating_div_int(-1i128), (inner_max / accuracy) as i128);","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_abs_works() {","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::from_inner(inner_max).saturating_abs(), $name::max_value());","highlight_start":1,"highlight_end":83},{"text":"\t\t\t\tassert_eq!($name::zero().saturating_abs(), 0.into());","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tassert_eq!($name::from_inner(inner_min).saturating_abs(), $name::max_value());","highlight_start":1,"highlight_end":84},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_rational(-1, 2).saturating_abs(), (1, 2).into());","highlight_start":1,"highlight_end":89},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_mul_acc_int_works() {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\tassert_eq!($name::zero().saturating_mul_acc_int(42i8), 42i8);","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!($name::one().saturating_mul_acc_int(42i8), 2 * 42i8);","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::one().saturating_mul_acc_int(i128::max_value()), i128::max_value());","highlight_start":1,"highlight_end":91},{"text":"\t\t\t\tassert_eq!($name::one().saturating_mul_acc_int(i128::min_value()), i128::min_value());","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::one().saturating_mul_acc_int(u128::max_value() / 2), u128::max_value() - 1);","highlight_start":1,"highlight_end":99},{"text":"\t\t\t\tassert_eq!($name::one().saturating_mul_acc_int(u128::min_value()), u128::min_value());","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(-1, 2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tassert_eq!(a.saturating_mul_acc_int(42i8), 21i8);","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\t\tassert_eq!(a.saturating_mul_acc_int(42u8), 21u8);","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\t\tassert_eq!(a.saturating_mul_acc_int(u128::max_value() - 1), u128::max_value() / 2);","highlight_start":1,"highlight_end":89},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_pow_should_work() {","highlight_start":1,"highlight_end":37},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(0), $name::saturating_from_integer(1));","highlight_start":1,"highlight_end":104},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(1), $name::saturating_from_integer(2));","highlight_start":1,"highlight_end":104},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(2), $name::saturating_from_integer(4));","highlight_start":1,"highlight_end":104},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(3), $name::saturating_from_integer(8));","highlight_start":1,"highlight_end":104},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(50),","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\t\t$name::saturating_from_integer(1125899906842624i64));","highlight_start":1,"highlight_end":59},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(1).saturating_pow(1000), (1).into());","highlight_start":1,"highlight_end":84},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(1).saturating_pow(usize::max_value()), (1).into());","highlight_start":1,"highlight_end":98},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Saturating.","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(68), $name::max_value());","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(-1).saturating_pow(1000), (1).into());","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(-1).saturating_pow(1001), 0.saturating_sub(1).into());","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(-1).saturating_pow(usize::max_value()), 0.saturating_sub(1).into());","highlight_start":1,"highlight_end":116},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(-1).saturating_pow(usize::max_value() - 1), (1).into());","highlight_start":1,"highlight_end":104},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(114209).saturating_pow(5), $name::max_value());","highlight_start":1,"highlight_end":94},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(1).saturating_pow(usize::max_value()), (1).into());","highlight_start":1,"highlight_end":98},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(0).saturating_pow(usize::max_value()), (0).into());","highlight_start":1,"highlight_end":98},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(usize::max_value()), $name::max_value());","highlight_start":1,"highlight_end":106},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn checked_div_works() {","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::from_inner(inner_max);","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\tlet b = $name::from_inner(inner_min);","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\tlet c = $name::zero();","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tlet d = $name::one();","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tlet e = $name::saturating_from_integer(6);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tlet f = $name::saturating_from_integer(5);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(e.checked_div(&2.into()), Some(3.into()));","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tassert_eq!(f.checked_div(&2.into()), Some((5, 2).into()));","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(a.checked_div(&inner_max.into()), Some(1.into()));","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!(a.checked_div(&2.into()), Some($name::from_inner(inner_max / 2)));","highlight_start":1,"highlight_end":82},{"text":"\t\t\t\tassert_eq!(a.checked_div(&$name::max_value()), Some(1.into()));","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\tassert_eq!(a.checked_div(&d), Some(a));","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif b < c {","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t// Not executed by unsigned inners.","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\t\tassert_eq!(a.checked_div(&0.saturating_sub(2).into()), Some($name::from_inner(0.saturating_sub(inner_max / 2))));","highlight_start":1,"highlight_end":119},{"text":"\t\t\t\t\tassert_eq!(a.checked_div(&-$name::max_value()), Some(0.saturating_sub(1).into()));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\tassert_eq!(b.checked_div(&0.saturating_sub(2).into()), Some($name::from_inner(0.saturating_sub(inner_min / 2))));","highlight_start":1,"highlight_end":119},{"text":"\t\t\t\t\tassert_eq!(c.checked_div(&$name::max_value()), Some(0.into()));","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\t\tassert_eq!(b.checked_div(&b), Some($name::one()));","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(b.checked_div(&2.into()), Some($name::from_inner(inner_min / 2)));","highlight_start":1,"highlight_end":82},{"text":"\t\t\t\tassert_eq!(b.checked_div(&a), Some(0.saturating_sub(1).into()));","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tassert_eq!(c.checked_div(&1.into()), Some(0.into()));","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tassert_eq!(d.checked_div(&1.into()), Some(1.into()));","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(a.checked_div(&$name::one()), Some(a));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\tassert_eq!(b.checked_div(&$name::one()), Some(b));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\tassert_eq!(c.checked_div(&$name::one()), Some(c));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\tassert_eq!(d.checked_div(&$name::one()), Some(d));","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(a.checked_div(&$name::zero()), None);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tassert_eq!(b.checked_div(&$name::zero()), None);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tassert_eq!(c.checked_div(&$name::zero()), None);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tassert_eq!(d.checked_div(&$name::zero()), None);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn is_positive_negative_works() {","highlight_start":1,"highlight_end":37},{"text":"\t\t\t\tlet one = $name::one();","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tassert!(one.is_positive());","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert!(!one.is_negative());","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet zero = $name::zero();","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\tassert!(!zero.is_positive());","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tassert!(!zero.is_negative());","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $signed {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\tlet minus_one = $name::saturating_from_integer(-1);","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\t\tassert!(minus_one.is_negative());","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\tassert!(!minus_one.is_positive());","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn trunc_works() {","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(5, 2).trunc();","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\tassert_eq!(n, $name::saturating_from_integer(2));","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet n = $name::saturating_from_rational(-5, 2).trunc();","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\tassert_eq!(n, $name::saturating_from_integer(-2));","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn frac_works() {","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tlet i = n.trunc();","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tlet f = n.frac();","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(n, i + f);","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(5, 2)","highlight_start":1,"highlight_end":50},{"text":"\t\t\t\t\t.frac()","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\t.saturating_mul(10.into());","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\tassert_eq!(n, 5.into());","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(1, 2)","highlight_start":1,"highlight_end":50},{"text":"\t\t\t\t\t.frac()","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\t.saturating_mul(10.into());","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\tassert_eq!(n, 5.into());","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet n = $name::saturating_from_rational(-5, 2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tlet i = n.trunc();","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\tlet f = n.frac();","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tassert_eq!(n, i - f);","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// The sign is attached to the integer part unless it is zero.","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\t\tlet n = $name::saturating_from_rational(-5, 2)","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t\t\t.frac()","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t.saturating_mul(10.into());","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\tassert_eq!(n, 5.into());","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet n = $name::saturating_from_rational(-1, 2)","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t\t\t.frac()","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t.saturating_mul(10.into());","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\tassert_eq!(n, 0.saturating_sub(5).into());","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn ceil_works() {","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tassert_eq!(n.ceil(), 3.into());","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(-5, 2);","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\tassert_eq!(n.ceil(), 0.saturating_sub(2).into());","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// On the limits:","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tlet n = $name::max_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(n.ceil(), n.trunc());","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::min_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(n.ceil(), n.trunc());","highlight_start":1,"highlight_end":37},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn floor_works() {","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tassert_eq!(n.floor(), 2.into());","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(-5, 2);","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\tassert_eq!(n.floor(), 0.saturating_sub(3).into());","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// On the limits:","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tlet n = $name::max_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(n.floor(), n.trunc());","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::min_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(n.floor(), n.trunc());","highlight_start":1,"highlight_end":38},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn round_works() {","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tlet n = $name::zero();","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tassert_eq!(n.round(), n);","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::one();","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tassert_eq!(n.round(), n);","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tassert_eq!(n.round(), 3.into());","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(-5, 2);","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\tassert_eq!(n.round(), 0.saturating_sub(3).into());","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Saturating:","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\tlet n = $name::max_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(n.round(), n.trunc());","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::min_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(n.round(), n.trunc());","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// On the limit:","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// floor(max - 1) + 0.33..","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\tlet n = $name::max_value()","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\t\t.saturating_sub(1.into())","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\t\t.trunc()","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t.saturating_add((1, 3).into());","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(n.round(), ($name::max_value() - 1.into()).trunc());","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// floor(max - 1) + 0.5","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tlet n = $name::max_value()","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\t\t.saturating_sub(1.into())","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\t\t.trunc()","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t.saturating_add((1, 2).into());","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(n.round(), $name::max_value().trunc());","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// floor(min + 1) - 0.33..","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\tlet n = $name::min_value()","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\t\t.saturating_add(1.into())","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\t\t.trunc()","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t.saturating_sub((1, 3).into());","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tassert_eq!(n.round(), ($name::min_value() + 1.into()).trunc());","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// floor(min + 1) - 0.5","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\tlet n = $name::min_value()","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\t\t.saturating_add(1.into())","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\t\t.trunc()","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t.saturating_sub((1, 2).into());","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tassert_eq!(n.round(), $name::min_value().trunc());","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn perthing_into_works() {","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\tlet ten_percent_percent: $name = Percent::from_percent(10).into();","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\tassert_eq!(ten_percent_percent.into_inner(), $name::accuracy() / 10);","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet ten_percent_permill: $name = Permill::from_percent(10).into();","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\tassert_eq!(ten_percent_permill.into_inner(), $name::accuracy() / 10);","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet ten_percent_perbill: $name = Perbill::from_percent(10).into();","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\tassert_eq!(ten_percent_perbill.into_inner(), $name::accuracy() / 10);","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet ten_percent_perquintill: $name = Perquintill::from_percent(10).into();","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\tassert_eq!(ten_percent_perquintill.into_inner(), $name::accuracy() / 10);","highlight_start":1,"highlight_end":78},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn fmt_should_work() {","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tlet zero = $name::zero();","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\tassert_eq!(format!(\"{:?}\", zero), format!(\"{}(0.{:0>weight$})\", stringify!($name), 0, weight=precision()));","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet one = $name::one();","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tassert_eq!(format!(\"{:?}\", one), format!(\"{}(1.{:0>weight$})\", stringify!($name), 0, weight=precision()));","highlight_start":1,"highlight_end":111},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet frac = $name::saturating_from_rational(1, 2);","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\tassert_eq!(format!(\"{:?}\", frac), format!(\"{}(0.{:0<weight$})\", stringify!($name), 5, weight=precision()));","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet frac = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\tassert_eq!(format!(\"{:?}\", frac), format!(\"{}(2.{:0<weight$})\", stringify!($name), 5, weight=precision()));","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet frac = $name::saturating_from_rational(314, 100);","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tassert_eq!(format!(\"{:?}\", frac), format!(\"{}(3.{:0<weight$})\", stringify!($name), 14, weight=precision()));","highlight_start":1,"highlight_end":113},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet neg = -$name::one();","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\tassert_eq!(format!(\"{:?}\", neg), format!(\"{}(-1.{:0>weight$})\", stringify!($name), 0, weight=precision()));","highlight_start":1,"highlight_end":113},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet frac = $name::saturating_from_rational(-314, 100);","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\tassert_eq!(format!(\"{:?}\", frac), format!(\"{}(-3.{:0<weight$})\", stringify!($name), 14, weight=precision()));","highlight_start":1,"highlight_end":115},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0282]\u001b[0m\u001b[0m\u001b[1m: type annotations needed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/zb/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.0/src/fixed_point.rs:541:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m541\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                let accuracy = P::ACCURACY.saturated_into();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconsider giving `accuracy` a type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1604\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimplement_fixed!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1605\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    FixedI128,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1606\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    test_fixed_i128,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1607\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    i128,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1611\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        [-170141183460469231731.687303715884105728, 170141183460469231731.687303715884105727]_\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1612\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `implement_fixed` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"type annotations needed","code":{"code":"E0282","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0282\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nApart from a method or function with a generic type parameter, this error can\noccur when a type parameter of a struct or trait cannot be inferred. In that\ncase it is not always possible to use a type annotation, because all candidates\nhave the same return type. For instance:\n\n```compile_fail,E0282\nstruct Foo<T> {\n    num: T,\n}\n\nimpl<T> Foo<T> {\n    fn bar() -> i32 {\n        0\n    }\n\n    fn baz() {\n        let number = Foo::bar();\n    }\n}\n```\n\nThis will fail because the compiler does not know which instance of `Foo` to\ncall `bar` on. Change `Foo::bar()` to `Foo::<T>::bar()` to resolve the error.\n"},"level":"error","spans":[{"file_name":"/home/zb/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.0/src/fixed_point.rs","byte_start":15827,"byte_end":15835,"line_start":541,"line_end":541,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"\t\t\t\tlet accuracy = P::ACCURACY.saturated_into();","highlight_start":9,"highlight_end":17}],"label":"consider giving `accuracy` a type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/zb/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.0/src/fixed_point.rs","byte_start":51366,"byte_end":51573,"line_start":1614,"line_end":1622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"implement_fixed!(","highlight_start":1,"highlight_end":18},{"text":"\tFixedU128,","highlight_start":1,"highlight_end":12},{"text":"\ttest_fixed_u128,","highlight_start":1,"highlight_end":18},{"text":"\tu128,","highlight_start":1,"highlight_end":7},{"text":"\tfalse,","highlight_start":1,"highlight_end":8},{"text":"\t1_000_000_000_000_000_000,","highlight_start":1,"highlight_end":28},{"text":"\t\"_Fixed Point 128 bits unsigned, range = \\","highlight_start":1,"highlight_end":44},{"text":"\t\t[0.000000000000000000, 340282366920938463463.374607431768211455]_\",","highlight_start":1,"highlight_end":70},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"implement_fixed!","def_site_span":{"file_name":"/home/zb/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.0/src/fixed_point.rs","byte_start":10752,"byte_end":50970,"line_start":333,"line_end":1593,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! implement_fixed {","highlight_start":1,"highlight_end":31},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$name:ident,","highlight_start":1,"highlight_end":15},{"text":"\t\t$test_mod:ident,","highlight_start":1,"highlight_end":19},{"text":"\t\t$inner_type:ty,","highlight_start":1,"highlight_end":18},{"text":"\t\t$signed:tt,","highlight_start":1,"highlight_end":14},{"text":"\t\t$div:tt,","highlight_start":1,"highlight_end":11},{"text":"\t\t$title:expr $(,)?","highlight_start":1,"highlight_end":20},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// A fixed point number representation in the range.","highlight_start":1,"highlight_end":56},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t#[doc = $title]","highlight_start":1,"highlight_end":18},{"text":"\t\t#[derive(Encode, Decode, Default, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]","highlight_start":1,"highlight_end":82},{"text":"\t\tpub struct $name($inner_type);","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl From<$inner_type> for $name {","highlight_start":1,"highlight_end":37},{"text":"\t\t\tfn from(int: $inner_type) -> Self {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$name::saturating_from_integer(int)","highlight_start":1,"highlight_end":40},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<N: FixedPointOperand, D: FixedPointOperand> From<(N, D)> for $name {","highlight_start":1,"highlight_end":76},{"text":"\t\t\tfn from(r: (N, D)) -> Self {","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t$name::saturating_from_rational(r.0, r.1)","highlight_start":1,"highlight_end":46},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl FixedPointNumber for $name {","highlight_start":1,"highlight_end":36},{"text":"\t\t\ttype Inner = $inner_type;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tconst DIV: Self::Inner = $div;","highlight_start":1,"highlight_end":34},{"text":"\t\t\tconst SIGNED: bool = $signed;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn from_inner(inner: Self::Inner) -> Self {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tSelf(inner)","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn into_inner(self) -> Self::Inner {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tself.0","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl $name {","highlight_start":1,"highlight_end":15},{"text":"\t\t\t/// const version of `FixedPointNumber::from_inner`.","highlight_start":1,"highlight_end":56},{"text":"\t\t\tpub const fn from_inner(inner: $inner_type) -> Self {","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\tSelf(inner)","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[cfg(any(feature = \"std\", test))]","highlight_start":1,"highlight_end":38},{"text":"\t\t\tpub fn from_fraction(x: f64) -> Self {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\tSelf((x * (<Self as FixedPointNumber>::DIV as f64)) as $inner_type)","highlight_start":1,"highlight_end":72},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[cfg(any(feature = \"std\", test))]","highlight_start":1,"highlight_end":38},{"text":"\t\t\tpub fn to_fraction(self) -> f64 {","highlight_start":1,"highlight_end":37},{"text":"\t\t\t\tself.0 as f64 / <Self as FixedPointNumber>::DIV as f64","highlight_start":1,"highlight_end":59},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl Saturating for $name {","highlight_start":1,"highlight_end":30},{"text":"\t\t\tfn saturating_add(self, rhs: Self) -> Self {","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tSelf(self.0.saturating_add(rhs.0))","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn saturating_sub(self, rhs: Self) -> Self {","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tSelf(self.0.saturating_sub(rhs.0))","highlight_start":1,"highlight_end":39},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn saturating_mul(self, rhs: Self) -> Self {","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tself.checked_mul(&rhs).unwrap_or_else(|| to_bound(self.0, rhs.0))","highlight_start":1,"highlight_end":70},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn saturating_pow(self, exp: usize) -> Self {","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tif exp == 0 {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\treturn Self::saturating_from_integer(1);","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet exp = exp as u32;","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tlet msb_pos = 32 - exp.leading_zeros();","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet mut result = Self::saturating_from_integer(1);","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\tlet mut pow_val = self;","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tfor i in 0..msb_pos {","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t\tif ((1 << i) & exp) > 0 {","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\t\t\tresult = result.saturating_mul(pow_val);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\t\t}","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\tpow_val = pow_val.saturating_mul(pow_val);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tresult","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl ops::Neg for $name {","highlight_start":1,"highlight_end":28},{"text":"\t\t\ttype Output = Self;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn neg(self) -> Self::Output {","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tSelf(<Self as FixedPointNumber>::Inner::zero() - self.0)","highlight_start":1,"highlight_end":61},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl ops::Add for $name {","highlight_start":1,"highlight_end":28},{"text":"\t\t\ttype Output = Self;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn add(self, rhs: Self) -> Self::Output {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tSelf(self.0 + rhs.0)","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl ops::Sub for $name {","highlight_start":1,"highlight_end":28},{"text":"\t\t\ttype Output = Self;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn sub(self, rhs: Self) -> Self::Output {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tSelf(self.0 - rhs.0)","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl ops::Mul for $name {","highlight_start":1,"highlight_end":28},{"text":"\t\t\ttype Output = Self;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn mul(self, rhs: Self) -> Self::Output {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tself.checked_mul(&rhs)","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t.unwrap_or_else(|| panic!(\"attempt to multiply with overflow\"))","highlight_start":1,"highlight_end":69},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl ops::Div for $name {","highlight_start":1,"highlight_end":28},{"text":"\t\t\ttype Output = Self;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn div(self, rhs: Self) -> Self::Output {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tif rhs.0 == 0 {","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\tpanic!(\"attempt to divide by zero\")","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tself.checked_div(&rhs)","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t.unwrap_or_else(|| panic!(\"attempt to divide with overflow\"))","highlight_start":1,"highlight_end":67},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl CheckedSub for $name {","highlight_start":1,"highlight_end":30},{"text":"\t\t\tfn checked_sub(&self, rhs: &Self) -> Option<Self> {","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\tself.0.checked_sub(rhs.0).map(Self)","highlight_start":1,"highlight_end":40},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl CheckedAdd for $name {","highlight_start":1,"highlight_end":30},{"text":"\t\t\tfn checked_add(&self, rhs: &Self) -> Option<Self> {","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\tself.0.checked_add(rhs.0).map(Self)","highlight_start":1,"highlight_end":40},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl CheckedDiv for $name {","highlight_start":1,"highlight_end":30},{"text":"\t\t\tfn checked_div(&self, other: &Self) -> Option<Self> {","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\tif other.0 == 0 {","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\treturn None","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet lhs: I129 = self.0.into();","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\tlet rhs: I129 = other.0.into();","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\tlet negative = lhs.negative != rhs.negative;","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tmultiply_by_rational(lhs.value, Self::DIV as u128, rhs.value).ok()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\t\t.and_then(|value| from_i129(I129 { value, negative }))","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t.map(Self)","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl CheckedMul for $name {","highlight_start":1,"highlight_end":30},{"text":"\t\t\tfn checked_mul(&self, other: &Self) -> Option<Self> {","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\tlet lhs: I129 = self.0.into();","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\tlet rhs: I129 = other.0.into();","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\tlet negative = lhs.negative != rhs.negative;","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tmultiply_by_rational(lhs.value, rhs.value, Self::DIV as u128).ok()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\t\t.and_then(|value| from_i129(I129 { value, negative }))","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t.map(Self)","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl Bounded for $name {","highlight_start":1,"highlight_end":27},{"text":"\t\t\tfn min_value() -> Self {","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tSelf(<Self as FixedPointNumber>::Inner::min_value())","highlight_start":1,"highlight_end":57},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn max_value() -> Self {","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tSelf(<Self as FixedPointNumber>::Inner::max_value())","highlight_start":1,"highlight_end":57},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl sp_std::fmt::Debug for $name {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":27},{"text":"\t\t\tfn fmt(&self, f: &mut sp_std::fmt::Formatter) -> sp_std::fmt::Result {","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\tlet integral = {","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\tlet int = self.0 / Self::accuracy();","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t\tlet signum_for_zero = if int == 0 && self.is_negative() { \"-\" } else { \"\" };","highlight_start":1,"highlight_end":82},{"text":"\t\t\t\t\tformat!(\"{}{}\", signum_for_zero, int)","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\tlet precision = (Self::accuracy() as f64).log10() as usize;","highlight_start":1,"highlight_end":64},{"text":"\t\t\t\tlet fractional = format!(\"{:0>weight$}\", ((self.0 % Self::accuracy()) as i128).abs(), weight=precision);","highlight_start":1,"highlight_end":109},{"text":"\t\t\t\twrite!(f, \"{}({}.{})\", stringify!($name), integral, fractional)","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[cfg(not(feature = \"std\"))]","highlight_start":1,"highlight_end":32},{"text":"\t\t\tfn fmt(&self, _: &mut sp_std::fmt::Formatter) -> sp_std::fmt::Result {","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\tOk(())","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<P: PerThing> From<P> for $name {","highlight_start":1,"highlight_end":40},{"text":"\t\t\tfn from(p: P) -> Self {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tlet accuracy = P::ACCURACY.saturated_into();","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tlet value = p.deconstruct().saturated_into();","highlight_start":1,"highlight_end":50},{"text":"\t\t\t\t$name::saturating_from_rational(value, accuracy)","highlight_start":1,"highlight_end":53},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl sp_std::fmt::Display for $name {","highlight_start":1,"highlight_end":40},{"text":"\t\t\tfn fmt(&self, f: &mut sp_std::fmt::Formatter) -> sp_std::fmt::Result {","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\twrite!(f, \"{}\", self.0)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl sp_std::str::FromStr for $name {","highlight_start":1,"highlight_end":40},{"text":"\t\t\ttype Err = &'static str;","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn from_str(s: &str) -> Result<Self, Self::Err> {","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tlet inner: <Self as FixedPointNumber>::Inner = s.parse()","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t.map_err(|_| \"invalid string input for fixed point number\")?;","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tOk(Self::from_inner(inner))","highlight_start":1,"highlight_end":32},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Manual impl `Serialize` as serde_json does not support i128.","highlight_start":1,"highlight_end":66},{"text":"\t\t// TODO: remove impl if issue https://github.com/serde-rs/json/issues/548 fixed.","highlight_start":1,"highlight_end":83},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl Serialize for $name {","highlight_start":1,"highlight_end":29},{"text":"\t\t\tfn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>","highlight_start":1,"highlight_end":68},{"text":"\t\t\twhere","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\tS: Serializer,","highlight_start":1,"highlight_end":19},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tserializer.serialize_str(&self.to_string())","highlight_start":1,"highlight_end":48},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Manual impl `Deserialize` as serde_json does not support i128.","highlight_start":1,"highlight_end":68},{"text":"\t\t// TODO: remove impl if issue https://github.com/serde-rs/json/issues/548 fixed.","highlight_start":1,"highlight_end":83},{"text":"\t\t#[cfg(feature = \"std\")]","highlight_start":1,"highlight_end":26},{"text":"\t\timpl<'de> Deserialize<'de> for $name {","highlight_start":1,"highlight_end":41},{"text":"\t\t\tfn deserialize<D>(deserializer: D) -> Result<Self, D::Error>","highlight_start":1,"highlight_end":64},{"text":"\t\t\twhere","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\tD: Deserializer<'de>,","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tuse sp_std::str::FromStr;","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\tlet s = String::deserialize(deserializer)?;","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t$name::from_str(&s).map_err(|err_str| de::Error::custom(err_str))","highlight_start":1,"highlight_end":70},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t#[cfg(test)]","highlight_start":1,"highlight_end":15},{"text":"\t\tmod $test_mod {","highlight_start":1,"highlight_end":18},{"text":"\t\t\tuse super::*;","highlight_start":1,"highlight_end":17},{"text":"\t\t\tuse crate::{Perbill, Percent, Permill, Perquintill};","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn max() -> $name {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t$name::max_value()","highlight_start":1,"highlight_end":23},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn min() -> $name {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t$name::min_value()","highlight_start":1,"highlight_end":23},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn precision() -> usize {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t($name::accuracy() as f64).log10() as usize","highlight_start":1,"highlight_end":48},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn macro_preconditions() {","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\tassert!($name::DIV > 0);","highlight_start":1,"highlight_end":29},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn from_i129_works() {","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tlet a = I129 {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tvalue: 1,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\tnegative: true,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Can't convert negative number to unsigned.","highlight_start":1,"highlight_end":50},{"text":"\t\t\t\tassert_eq!(from_i129::<u128>(a), None);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = I129 {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tvalue: u128::max_value() - 1,","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\tnegative: false,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max - 1 value fits.","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tassert_eq!(from_i129::<u128>(a), Some(u128::max_value() - 1));","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = I129 {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tvalue: u128::max_value(),","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\t\tnegative: false,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max value fits.","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tassert_eq!(from_i129::<u128>(a), Some(u128::max_value()));","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = I129 {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tvalue: i128::max_value() as u128 + 1,","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\tnegative: true,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Min value fits.","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tassert_eq!(from_i129::<i128>(a), Some(i128::min_value()));","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = I129 {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tvalue: i128::max_value() as u128 + 1,","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\tnegative: false,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max + 1 does not fit.","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tassert_eq!(from_i129::<i128>(a), None);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = I129 {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tvalue: i128::max_value() as u128,","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\tnegative: false,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max value fits.","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tassert_eq!(from_i129::<i128>(a), Some(i128::max_value()));","highlight_start":1,"highlight_end":63},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn to_bound_works() {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\tlet a = 1i32;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\tlet b = 1i32;","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Pos + Pos => Max.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\tassert_eq!(to_bound::<_, _, i32>(a, b), i32::max_value());","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = -1i32;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\tlet b = -1i32;","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Neg + Neg => Max.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\tassert_eq!(to_bound::<_, _, i32>(a, b), i32::max_value());","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = 1i32;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\tlet b = -1i32;","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Pos + Neg => Min.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\tassert_eq!(to_bound::<_, _, i32>(a, b), i32::min_value());","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = -1i32;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\tlet b = 1i32;","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Neg + Pos => Min.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\tassert_eq!(to_bound::<_, _, i32>(a, b), i32::min_value());","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = 1i32;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\tlet b = -1i32;","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Pos + Neg => Min (unsigned).","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\tassert_eq!(to_bound::<_, _, u32>(a, b), 0);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_neg_works() {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tlet a = $name::zero();","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tlet b = -a;","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Zero.","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\tassert_eq!(a, b);","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet a = $name::saturating_from_integer(5);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tlet b = -a;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Positive.","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(-5), b);","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_integer(-5);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\tlet b = -a;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Negative","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(5), b);","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::max_value();","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tlet b = -a;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Max.","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\tassert_eq!($name::min_value() + $name::from_inner(1), b);","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::min_value() + $name::from_inner(1);","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\tlet b = -a;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Min.","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\tassert_eq!($name::max_value(), b);","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_checked_add_overflow_works() {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tlet a = $name::max_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tlet b = 1.into();","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tassert!(a.checked_add(&b).is_none());","highlight_start":1,"highlight_end":42},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_add_works() {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tlet b = $name::saturating_from_rational(1, 2);","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Positive case: 6/2 = 3.","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(3), a + b);","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Negative case: 4/2 = 2.","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\tlet b = $name::saturating_from_rational(1, -2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(2), a + b);","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_checked_sub_underflow_works() {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tlet a = $name::min_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tlet b = 1.into();","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tassert!(a.checked_sub(&b).is_none());","highlight_start":1,"highlight_end":42},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_sub_works() {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tlet b = $name::saturating_from_rational(1, 2);","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2), a - b);","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(-2), b.saturating_sub(a));","highlight_start":1,"highlight_end":73},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_checked_mul_overflow_works() {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tlet a = $name::max_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tlet b = 2.into();","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tassert!(a.checked_mul(&b).is_none());","highlight_start":1,"highlight_end":42},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_mul_works() {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(42);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tlet b = $name::saturating_from_integer(2);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(84), a * b);","highlight_start":1,"highlight_end":59},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(42);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tlet b = $name::saturating_from_integer(-2);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(-84), a * b);","highlight_start":1,"highlight_end":60},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\t#[should_panic(expected = \"attempt to divide by zero\")]","highlight_start":1,"highlight_end":59},{"text":"\t\t\tfn op_div_panics_on_zero_divisor() {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(1);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tlet b = 0.into();","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tlet _c = a / b;","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_checked_div_overflow_works() {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet a = $name::min_value();","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tlet b = $name::zero().saturating_sub($name::one());","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\t\tassert!(a.checked_div(&b).is_none());","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn op_div_works() {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(42);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tlet b = $name::saturating_from_integer(2);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(21), a / b);","highlight_start":1,"highlight_end":59},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet a = $name::saturating_from_integer(42);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\tlet b = $name::saturating_from_integer(-2);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(-21), a / b);","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_from_integer_works() {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet accuracy = $name::accuracy();","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Cases where integer fits.","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(42);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 42 * accuracy);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(-42);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 0.saturating_sub(42 * accuracy));","highlight_start":1,"highlight_end":65},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max/min integers that fit.","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(inner_max / accuracy);","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!(a.into_inner(), (inner_max / accuracy) * accuracy);","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(inner_min / accuracy);","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!(a.into_inner(), (inner_min / accuracy) * accuracy);","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Cases where integer doesn't fit, so it saturates.","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(inner_max / accuracy + 1);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_integer((inner_min / accuracy).saturating_sub(1));","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":43},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn checked_from_integer_works() {","highlight_start":1,"highlight_end":37},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet accuracy = $name::accuracy();","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Case where integer fits.","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tlet a = $name::checked_from_integer(42)","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\t\t.expect(\"42 * accuracy <= inner_max; qed\");","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 42 * accuracy);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max integer that fit.","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tlet a = $name::checked_from_integer(inner_max / accuracy)","highlight_start":1,"highlight_end":62},{"text":"\t\t\t\t\t.expect(\"(inner_max / accuracy) * accuracy <= inner_max; qed\");","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tassert_eq!(a.into_inner(), (inner_max / accuracy) * accuracy);","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Case where integer doesn't fit, so it returns `None`.","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\tlet a = $name::checked_from_integer(inner_max / accuracy + 1);","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Case where integer fits.","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tlet a = $name::checked_from_integer(0.saturating_sub(42))","highlight_start":1,"highlight_end":63},{"text":"\t\t\t\t\t\t.expect(\"-42 * accuracy >= inner_min; qed\");","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - 42 * accuracy);","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Min integer that fit.","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\tlet a = $name::checked_from_integer(inner_min / accuracy)","highlight_start":1,"highlight_end":63},{"text":"\t\t\t\t\t\t.expect(\"(inner_min / accuracy) * accuracy <= inner_min; qed\");","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), (inner_min / accuracy) * accuracy);","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Case where integer doesn't fit, so it returns `None`.","highlight_start":1,"highlight_end":62},{"text":"\t\t\t\t\tlet a = $name::checked_from_integer(inner_min / accuracy - 1);","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn from_inner_works() {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(max(), $name::from_inner(inner_max));","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tassert_eq!(min(), $name::from_inner(inner_min));","highlight_start":1,"highlight_end":53},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\t#[should_panic(expected = \"attempt to divide by zero\")]","highlight_start":1,"highlight_end":59},{"text":"\t\t\tfn saturating_from_rational_panics_on_zero_divisor() {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tlet _ = $name::saturating_from_rational(1, 0);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_from_rational_works() {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet accuracy = $name::accuracy();","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Positive case: 2.5","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 25 * accuracy / 10);","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max - 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_max - 1, accuracy);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max - 1);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Min + 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_min + 1, accuracy);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min + 1);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_max, accuracy);","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Min.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_min, accuracy);","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Zero.","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(0, 1);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 0);","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Negative case: -2.5","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(-5, 2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(),  0 - 25 * accuracy / 10);","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Other negative case: -2.5","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(5, -2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - 25 * accuracy / 10);","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Other positive case: 2.5","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(-5, -2);","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 25 * accuracy / 10);","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Max + 1, saturates.","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_max as u128 + 1, accuracy);","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Min - 1, saturates.","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_max as u128 + 2, 0 - accuracy);","highlight_start":1,"highlight_end":83},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_max, 0 - accuracy);","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - inner_max);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_min, 0 - accuracy);","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_min + 1, 0 - accuracy);","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_min, 0 - 1);","highlight_start":1,"highlight_end":64},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_max, 0 - 1);","highlight_start":1,"highlight_end":64},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_max, 0 - inner_max);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - accuracy);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(0 - inner_max, inner_max);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - accuracy);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_max, 0 - 3 * accuracy);","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - inner_max / 3);","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_min, 0 - accuracy / 3);","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(1, 0 - accuracy);","highlight_start":1,"highlight_end":63},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0.saturating_sub(1));","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(inner_min, inner_min);","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), accuracy);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Out of accuracy.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(1, 0 - accuracy - 1);","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0);","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_max - 1, accuracy);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max - 1);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_min + 1, accuracy);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min + 1);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_max, 1);","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_min, 1);","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_max, inner_max);","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tassert_eq!(a.into_inner(), accuracy);","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_max, 3 * accuracy);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max / 3);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_min, 2 * accuracy);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min / 2);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(inner_min, accuracy / 3);","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(1, accuracy);","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 1);","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Out of accuracy.","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(1, accuracy + 1);","highlight_start":1,"highlight_end":62},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 0);","highlight_start":1,"highlight_end":35},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn checked_from_rational_works() {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet accuracy = $name::accuracy();","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Divide by zero => None.","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\tlet a = $name::checked_from_rational(1, 0);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max - 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_max - 1, accuracy).unwrap();","highlight_start":1,"highlight_end":76},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max - 1);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Min + 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_min + 1, accuracy).unwrap();","highlight_start":1,"highlight_end":76},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min + 1);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_max, accuracy).unwrap();","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Min.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_min, accuracy).unwrap();","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min);","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max + 1 => Overflow => None.","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_min, 0.saturating_sub(accuracy));","highlight_start":1,"highlight_end":81},{"text":"\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Min - 1 => Underflow => None.","highlight_start":1,"highlight_end":38},{"text":"\t\t\t\t\tlet a = $name::checked_from_rational(inner_max as u128 + 2, 0.saturating_sub(accuracy));","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::checked_from_rational(inner_max, 0 - 3 * accuracy).unwrap();","highlight_start":1,"highlight_end":81},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0 - inner_max / 3);","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::checked_from_rational(inner_min, 0 - accuracy / 3);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::checked_from_rational(1, 0 - accuracy).unwrap();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0.saturating_sub(1));","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::checked_from_rational(1, 0 - accuracy - 1).unwrap();","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\tassert_eq!(a.into_inner(), 0);","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::checked_from_rational(inner_min, accuracy / 3);","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\t\tassert_eq!(a, None);","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_max, 3 * accuracy).unwrap();","highlight_start":1,"highlight_end":76},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_max / 3);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::checked_from_rational(inner_min, 2 * accuracy).unwrap();","highlight_start":1,"highlight_end":76},{"text":"\t\t\t\tassert_eq!(a.into_inner(), inner_min / 2);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::checked_from_rational(1, accuracy).unwrap();","highlight_start":1,"highlight_end":64},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 1);","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::checked_from_rational(1, accuracy + 1).unwrap();","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\tassert_eq!(a.into_inner(), 0);","highlight_start":1,"highlight_end":35},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn checked_mul_int_works() {","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(2);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\t// Max - 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tassert_eq!(a.checked_mul_int((i128::max_value() - 1) / 2), Some(i128::max_value() - 1));","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t// Max.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tassert_eq!(a.checked_mul_int(i128::max_value() / 2), Some(i128::max_value() - 1));","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t// Max + 1 => None.","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tassert_eq!(a.checked_mul_int(i128::max_value() / 2 + 1), None);","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Min - 1.","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\tassert_eq!(a.checked_mul_int((i128::min_value() + 1) / 2), Some(i128::min_value() + 2));","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\t\t// Min.","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\tassert_eq!(a.checked_mul_int(i128::min_value() / 2), Some(i128::min_value()));","highlight_start":1,"highlight_end":84},{"text":"\t\t\t\t\t// Min + 1 => None.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tassert_eq!(a.checked_mul_int(i128::min_value() / 2 - 1), None);","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet b = $name::saturating_from_rational(1, -2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul_int(42i128), Some(-21));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul_int(u128::max_value()), None);","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul_int(i128::max_value()), Some(i128::max_value() / -2));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul_int(i128::min_value()), Some(i128::min_value() / -2));","highlight_start":1,"highlight_end":85},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(1, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tassert_eq!(a.checked_mul_int(42i128), Some(21));","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tassert_eq!(a.checked_mul_int(i128::max_value()), Some(i128::max_value() / 2));","highlight_start":1,"highlight_end":83},{"text":"\t\t\t\tassert_eq!(a.checked_mul_int(i128::min_value()), Some(i128::min_value() / 2));","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet c = $name::saturating_from_integer(255);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tassert_eq!(c.checked_mul_int(2i8), None);","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\tassert_eq!(c.checked_mul_int(2i128), Some(510));","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tassert_eq!(c.checked_mul_int(i128::max_value()), None);","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\tassert_eq!(c.checked_mul_int(i128::min_value()), None);","highlight_start":1,"highlight_end":60},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_mul_int_works() {","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(2);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\t// Max - 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int((i128::max_value() - 1) / 2), i128::max_value() - 1);","highlight_start":1,"highlight_end":90},{"text":"\t\t\t\t// Max.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(i128::max_value() / 2), i128::max_value() - 1);","highlight_start":1,"highlight_end":84},{"text":"\t\t\t\t// Max + 1 => saturates to max.","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(i128::max_value() / 2 + 1), i128::max_value());","highlight_start":1,"highlight_end":84},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Min - 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int((i128::min_value() + 1) / 2), i128::min_value() + 2);","highlight_start":1,"highlight_end":90},{"text":"\t\t\t\t// Min.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(i128::min_value() / 2), i128::min_value());","highlight_start":1,"highlight_end":80},{"text":"\t\t\t\t// Min + 1 => saturates to min.","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(i128::min_value() / 2 - 1), i128::min_value());","highlight_start":1,"highlight_end":84},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet b = $name::saturating_from_rational(1, -2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tassert_eq!(b.saturating_mul_int(42i32), -21);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\t\tassert_eq!(b.saturating_mul_int(i128::max_value()), i128::max_value() / -2);","highlight_start":1,"highlight_end":82},{"text":"\t\t\t\t\tassert_eq!(b.saturating_mul_int(i128::min_value()), i128::min_value() / -2);","highlight_start":1,"highlight_end":82},{"text":"\t\t\t\t\tassert_eq!(b.saturating_mul_int(u128::max_value()), u128::min_value());","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(1, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(42i32), 21);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(i128::max_value()), i128::max_value() / 2);","highlight_start":1,"highlight_end":80},{"text":"\t\t\t\tassert_eq!(a.saturating_mul_int(i128::min_value()), i128::min_value() / 2);","highlight_start":1,"highlight_end":80},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet c = $name::saturating_from_integer(255);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\tassert_eq!(c.saturating_mul_int(2i8), i8::max_value());","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\tassert_eq!(c.saturating_mul_int(-2i8), i8::min_value());","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\tassert_eq!(c.saturating_mul_int(i128::max_value()), i128::max_value());","highlight_start":1,"highlight_end":76},{"text":"\t\t\t\tassert_eq!(c.saturating_mul_int(i128::min_value()), i128::min_value());","highlight_start":1,"highlight_end":76},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn checked_mul_works() {","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(2);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max - 1.","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\tlet b = $name::from_inner(inner_max - 1);","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\tassert_eq!(a.checked_mul(&(b/2.into())), Some(b));","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max.","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tlet c = $name::from_inner(inner_max);","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\tassert_eq!(a.checked_mul(&(c/2.into())), Some(b));","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Max + 1 => None.","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tlet e = $name::from_inner(1);","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tassert_eq!(a.checked_mul(&(c/2.into()+e)), None);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Min + 1.","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\tlet b = $name::from_inner(inner_min + 1) / 2.into();","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\tlet c = $name::from_inner(inner_min + 2);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\t\tassert_eq!(a.checked_mul(&b), Some(c));","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Min.","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\tlet b = $name::from_inner(inner_min) / 2.into();","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\tlet c = $name::from_inner(inner_min);","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\tassert_eq!(a.checked_mul(&b), Some(c));","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// Min - 1 => None.","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tlet b = $name::from_inner(inner_min) / 2.into() - $name::from_inner(1);","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\t\tassert_eq!(a.checked_mul(&b), None);","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet c = $name::saturating_from_integer(255);","highlight_start":1,"highlight_end":50},{"text":"\t\t\t\t\tlet b = $name::saturating_from_rational(1, -2);","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul(&42.into()), Some(0.saturating_sub(21).into()));","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul(&$name::max_value()), $name::max_value().checked_div(&0.saturating_sub(2).into()));","highlight_start":1,"highlight_end":114},{"text":"\t\t\t\t\tassert_eq!(b.checked_mul(&$name::min_value()), $name::min_value().checked_div(&0.saturating_sub(2).into()));","highlight_start":1,"highlight_end":114},{"text":"\t\t\t\t\tassert_eq!(c.checked_mul(&$name::min_value()), None);","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_rational(1, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tlet c = $name::saturating_from_integer(255);","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(a.checked_mul(&42.into()), Some(21.into()));","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\tassert_eq!(c.checked_mul(&2.into()), Some(510.into()));","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\tassert_eq!(c.checked_mul(&$name::max_value()), None);","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tassert_eq!(a.checked_mul(&$name::max_value()), $name::max_value().checked_div(&2.into()));","highlight_start":1,"highlight_end":95},{"text":"\t\t\t\tassert_eq!(a.checked_mul(&$name::min_value()), $name::min_value().checked_div(&2.into()));","highlight_start":1,"highlight_end":95},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn checked_div_int_works() {","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet accuracy = $name::accuracy();","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::from_inner(inner_max);","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\tlet b = $name::from_inner(inner_min);","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\tlet c = $name::zero();","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tlet d = $name::one();","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tlet e = $name::saturating_from_integer(6);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tlet f = $name::saturating_from_integer(5);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(e.checked_div_int(2.into()), Some(3));","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\tassert_eq!(f.checked_div_int(2.into()), Some(2));","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(a.checked_div_int(i128::max_value()), Some(0));","highlight_start":1,"highlight_end":63},{"text":"\t\t\t\tassert_eq!(a.checked_div_int(2), Some(inner_max / (2 * accuracy)));","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\tassert_eq!(a.checked_div_int(inner_max / accuracy), Some(1));","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!(a.checked_div_int(1i8), None);","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif b < c {","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t// Not executed by unsigned inners.","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\t\tassert_eq!(a.checked_div_int(0.saturating_sub(2)), Some(0.saturating_sub(inner_max / (2 * accuracy))));","highlight_start":1,"highlight_end":109},{"text":"\t\t\t\t\tassert_eq!(a.checked_div_int(0.saturating_sub(inner_max / accuracy)), Some(0.saturating_sub(1)));","highlight_start":1,"highlight_end":103},{"text":"\t\t\t\t\tassert_eq!(b.checked_div_int(i128::min_value()), Some(0));","highlight_start":1,"highlight_end":64},{"text":"\t\t\t\t\tassert_eq!(b.checked_div_int(inner_min / accuracy), Some(1));","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\t\tassert_eq!(b.checked_div_int(1i8), None);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\t\tassert_eq!(b.checked_div_int(0.saturating_sub(2)), Some(0.saturating_sub(inner_min / (2 * accuracy))));","highlight_start":1,"highlight_end":109},{"text":"\t\t\t\t\tassert_eq!(b.checked_div_int(0.saturating_sub(inner_min / accuracy)), Some(0.saturating_sub(1)));","highlight_start":1,"highlight_end":103},{"text":"\t\t\t\t\tassert_eq!(c.checked_div_int(i128::min_value()), Some(0));","highlight_start":1,"highlight_end":64},{"text":"\t\t\t\t\tassert_eq!(d.checked_div_int(i32::min_value()), Some(0));","highlight_start":1,"highlight_end":63},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(b.checked_div_int(2), Some(inner_min / (2 * accuracy)));","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(c.checked_div_int(1), Some(0));","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tassert_eq!(c.checked_div_int(i128::max_value()), Some(0));","highlight_start":1,"highlight_end":63},{"text":"\t\t\t\tassert_eq!(c.checked_div_int(1i8), Some(0));","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(d.checked_div_int(1), Some(1));","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tassert_eq!(d.checked_div_int(i32::max_value()), Some(0));","highlight_start":1,"highlight_end":62},{"text":"\t\t\t\tassert_eq!(d.checked_div_int(1i8), Some(1));","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(a.checked_div_int(0), None);","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\tassert_eq!(b.checked_div_int(0), None);","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\tassert_eq!(c.checked_div_int(0), None);","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\tassert_eq!(d.checked_div_int(0), None);","highlight_start":1,"highlight_end":44},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\t#[should_panic(expected = \"attempt to divide by zero\")]","highlight_start":1,"highlight_end":59},{"text":"\t\t\tfn saturating_div_int_panics_when_divisor_is_zero() {","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\tlet _ = $name::one().saturating_div_int(0);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_div_int_works() {","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet accuracy = $name::accuracy();","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::saturating_from_integer(5);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tassert_eq!(a.saturating_div_int(2), 2);","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::min_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(a.saturating_div_int(1i128), (inner_min / accuracy) as i128);","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet a = $name::saturating_from_integer(5);","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tassert_eq!(a.saturating_div_int(-2), -2);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet a = $name::min_value();","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tassert_eq!(a.saturating_div_int(-1i128), (inner_max / accuracy) as i128);","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_abs_works() {","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::from_inner(inner_max).saturating_abs(), $name::max_value());","highlight_start":1,"highlight_end":83},{"text":"\t\t\t\tassert_eq!($name::zero().saturating_abs(), 0.into());","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tassert_eq!($name::from_inner(inner_min).saturating_abs(), $name::max_value());","highlight_start":1,"highlight_end":84},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_rational(-1, 2).saturating_abs(), (1, 2).into());","highlight_start":1,"highlight_end":89},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_mul_acc_int_works() {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\tassert_eq!($name::zero().saturating_mul_acc_int(42i8), 42i8);","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!($name::one().saturating_mul_acc_int(42i8), 2 * 42i8);","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::one().saturating_mul_acc_int(i128::max_value()), i128::max_value());","highlight_start":1,"highlight_end":91},{"text":"\t\t\t\tassert_eq!($name::one().saturating_mul_acc_int(i128::min_value()), i128::min_value());","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::one().saturating_mul_acc_int(u128::max_value() / 2), u128::max_value() - 1);","highlight_start":1,"highlight_end":99},{"text":"\t\t\t\tassert_eq!($name::one().saturating_mul_acc_int(u128::min_value()), u128::min_value());","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet a = $name::saturating_from_rational(-1, 2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tassert_eq!(a.saturating_mul_acc_int(42i8), 21i8);","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\t\tassert_eq!(a.saturating_mul_acc_int(42u8), 21u8);","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\t\tassert_eq!(a.saturating_mul_acc_int(u128::max_value() - 1), u128::max_value() / 2);","highlight_start":1,"highlight_end":89},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn saturating_pow_should_work() {","highlight_start":1,"highlight_end":37},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(0), $name::saturating_from_integer(1));","highlight_start":1,"highlight_end":104},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(1), $name::saturating_from_integer(2));","highlight_start":1,"highlight_end":104},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(2), $name::saturating_from_integer(4));","highlight_start":1,"highlight_end":104},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(3), $name::saturating_from_integer(8));","highlight_start":1,"highlight_end":104},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(50),","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\t\t$name::saturating_from_integer(1125899906842624i64));","highlight_start":1,"highlight_end":59},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(1).saturating_pow(1000), (1).into());","highlight_start":1,"highlight_end":84},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(1).saturating_pow(usize::max_value()), (1).into());","highlight_start":1,"highlight_end":98},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// Saturating.","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(68), $name::max_value());","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(-1).saturating_pow(1000), (1).into());","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(-1).saturating_pow(1001), 0.saturating_sub(1).into());","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(-1).saturating_pow(usize::max_value()), 0.saturating_sub(1).into());","highlight_start":1,"highlight_end":116},{"text":"\t\t\t\t\tassert_eq!($name::saturating_from_integer(-1).saturating_pow(usize::max_value() - 1), (1).into());","highlight_start":1,"highlight_end":104},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(114209).saturating_pow(5), $name::max_value());","highlight_start":1,"highlight_end":94},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(1).saturating_pow(usize::max_value()), (1).into());","highlight_start":1,"highlight_end":98},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(0).saturating_pow(usize::max_value()), (0).into());","highlight_start":1,"highlight_end":98},{"text":"\t\t\t\tassert_eq!($name::saturating_from_integer(2).saturating_pow(usize::max_value()), $name::max_value());","highlight_start":1,"highlight_end":106},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn checked_div_works() {","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tlet inner_max = <$name as FixedPointNumber>::Inner::max_value();","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tlet inner_min = <$name as FixedPointNumber>::Inner::min_value();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet a = $name::from_inner(inner_max);","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\tlet b = $name::from_inner(inner_min);","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\tlet c = $name::zero();","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tlet d = $name::one();","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tlet e = $name::saturating_from_integer(6);","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tlet f = $name::saturating_from_integer(5);","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(e.checked_div(&2.into()), Some(3.into()));","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tassert_eq!(f.checked_div(&2.into()), Some((5, 2).into()));","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(a.checked_div(&inner_max.into()), Some(1.into()));","highlight_start":1,"highlight_end":66},{"text":"\t\t\t\tassert_eq!(a.checked_div(&2.into()), Some($name::from_inner(inner_max / 2)));","highlight_start":1,"highlight_end":82},{"text":"\t\t\t\tassert_eq!(a.checked_div(&$name::max_value()), Some(1.into()));","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\tassert_eq!(a.checked_div(&d), Some(a));","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif b < c {","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t// Not executed by unsigned inners.","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\t\tassert_eq!(a.checked_div(&0.saturating_sub(2).into()), Some($name::from_inner(0.saturating_sub(inner_max / 2))));","highlight_start":1,"highlight_end":119},{"text":"\t\t\t\t\tassert_eq!(a.checked_div(&-$name::max_value()), Some(0.saturating_sub(1).into()));","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\tassert_eq!(b.checked_div(&0.saturating_sub(2).into()), Some($name::from_inner(0.saturating_sub(inner_min / 2))));","highlight_start":1,"highlight_end":119},{"text":"\t\t\t\t\tassert_eq!(c.checked_div(&$name::max_value()), Some(0.into()));","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\t\tassert_eq!(b.checked_div(&b), Some($name::one()));","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(b.checked_div(&2.into()), Some($name::from_inner(inner_min / 2)));","highlight_start":1,"highlight_end":82},{"text":"\t\t\t\tassert_eq!(b.checked_div(&a), Some(0.saturating_sub(1).into()));","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\tassert_eq!(c.checked_div(&1.into()), Some(0.into()));","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tassert_eq!(d.checked_div(&1.into()), Some(1.into()));","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(a.checked_div(&$name::one()), Some(a));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\tassert_eq!(b.checked_div(&$name::one()), Some(b));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\tassert_eq!(c.checked_div(&$name::one()), Some(c));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\tassert_eq!(d.checked_div(&$name::one()), Some(d));","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(a.checked_div(&$name::zero()), None);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tassert_eq!(b.checked_div(&$name::zero()), None);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tassert_eq!(c.checked_div(&$name::zero()), None);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\tassert_eq!(d.checked_div(&$name::zero()), None);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn is_positive_negative_works() {","highlight_start":1,"highlight_end":37},{"text":"\t\t\t\tlet one = $name::one();","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tassert!(one.is_positive());","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert!(!one.is_negative());","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet zero = $name::zero();","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\tassert!(!zero.is_positive());","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tassert!(!zero.is_negative());","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $signed {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\tlet minus_one = $name::saturating_from_integer(-1);","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\t\tassert!(minus_one.is_negative());","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\tassert!(!minus_one.is_positive());","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn trunc_works() {","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(5, 2).trunc();","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\tassert_eq!(n, $name::saturating_from_integer(2));","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet n = $name::saturating_from_rational(-5, 2).trunc();","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\tassert_eq!(n, $name::saturating_from_integer(-2));","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn frac_works() {","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tlet i = n.trunc();","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\tlet f = n.frac();","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(n, i + f);","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(5, 2)","highlight_start":1,"highlight_end":50},{"text":"\t\t\t\t\t.frac()","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\t.saturating_mul(10.into());","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\tassert_eq!(n, 5.into());","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(1, 2)","highlight_start":1,"highlight_end":50},{"text":"\t\t\t\t\t.frac()","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\t.saturating_mul(10.into());","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\tassert_eq!(n, 5.into());","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet n = $name::saturating_from_rational(-5, 2);","highlight_start":1,"highlight_end":53},{"text":"\t\t\t\t\tlet i = n.trunc();","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\tlet f = n.frac();","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tassert_eq!(n, i - f);","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// The sign is attached to the integer part unless it is zero.","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\t\tlet n = $name::saturating_from_rational(-5, 2)","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t\t\t.frac()","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t.saturating_mul(10.into());","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\tassert_eq!(n, 5.into());","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet n = $name::saturating_from_rational(-1, 2)","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t\t\t.frac()","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t.saturating_mul(10.into());","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\tassert_eq!(n, 0.saturating_sub(5).into());","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn ceil_works() {","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tassert_eq!(n.ceil(), 3.into());","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(-5, 2);","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\tassert_eq!(n.ceil(), 0.saturating_sub(2).into());","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// On the limits:","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tlet n = $name::max_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(n.ceil(), n.trunc());","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::min_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(n.ceil(), n.trunc());","highlight_start":1,"highlight_end":37},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn floor_works() {","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tassert_eq!(n.floor(), 2.into());","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(-5, 2);","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\tassert_eq!(n.floor(), 0.saturating_sub(3).into());","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// On the limits:","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tlet n = $name::max_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(n.floor(), n.trunc());","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::min_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(n.floor(), n.trunc());","highlight_start":1,"highlight_end":38},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn round_works() {","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\tlet n = $name::zero();","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\tassert_eq!(n.round(), n);","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::one();","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tassert_eq!(n.round(), n);","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t\tassert_eq!(n.round(), 3.into());","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::saturating_from_rational(-5, 2);","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\tassert_eq!(n.round(), 0.saturating_sub(3).into());","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// Saturating:","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\tlet n = $name::max_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(n.round(), n.trunc());","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet n = $name::min_value();","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tassert_eq!(n.round(), n.trunc());","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// On the limit:","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// floor(max - 1) + 0.33..","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\tlet n = $name::max_value()","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\t\t.saturating_sub(1.into())","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\t\t.trunc()","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t.saturating_add((1, 3).into());","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(n.round(), ($name::max_value() - 1.into()).trunc());","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t// floor(max - 1) + 0.5","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tlet n = $name::max_value()","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\t\t.saturating_sub(1.into())","highlight_start":1,"highlight_end":31},{"text":"\t\t\t\t\t.trunc()","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t.saturating_add((1, 2).into());","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tassert_eq!(n.round(), $name::max_value().trunc());","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\t// floor(min + 1) - 0.33..","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\tlet n = $name::min_value()","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\t\t.saturating_add(1.into())","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\t\t.trunc()","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t.saturating_sub((1, 3).into());","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tassert_eq!(n.round(), ($name::min_value() + 1.into()).trunc());","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t// floor(min + 1) - 0.5","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\tlet n = $name::min_value()","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\t\t.saturating_add(1.into())","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\t\t.trunc()","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t.saturating_sub((1, 2).into());","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tassert_eq!(n.round(), $name::min_value().trunc());","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn perthing_into_works() {","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\tlet ten_percent_percent: $name = Percent::from_percent(10).into();","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\tassert_eq!(ten_percent_percent.into_inner(), $name::accuracy() / 10);","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet ten_percent_permill: $name = Permill::from_percent(10).into();","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\tassert_eq!(ten_percent_permill.into_inner(), $name::accuracy() / 10);","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet ten_percent_perbill: $name = Perbill::from_percent(10).into();","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\tassert_eq!(ten_percent_perbill.into_inner(), $name::accuracy() / 10);","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet ten_percent_perquintill: $name = Perquintill::from_percent(10).into();","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\tassert_eq!(ten_percent_perquintill.into_inner(), $name::accuracy() / 10);","highlight_start":1,"highlight_end":78},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t#[test]","highlight_start":1,"highlight_end":11},{"text":"\t\t\tfn fmt_should_work() {","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tlet zero = $name::zero();","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\tassert_eq!(format!(\"{:?}\", zero), format!(\"{}(0.{:0>weight$})\", stringify!($name), 0, weight=precision()));","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet one = $name::one();","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tassert_eq!(format!(\"{:?}\", one), format!(\"{}(1.{:0>weight$})\", stringify!($name), 0, weight=precision()));","highlight_start":1,"highlight_end":111},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet frac = $name::saturating_from_rational(1, 2);","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\tassert_eq!(format!(\"{:?}\", frac), format!(\"{}(0.{:0<weight$})\", stringify!($name), 5, weight=precision()));","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet frac = $name::saturating_from_rational(5, 2);","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\tassert_eq!(format!(\"{:?}\", frac), format!(\"{}(2.{:0<weight$})\", stringify!($name), 5, weight=precision()));","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet frac = $name::saturating_from_rational(314, 100);","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\tassert_eq!(format!(\"{:?}\", frac), format!(\"{}(3.{:0<weight$})\", stringify!($name), 14, weight=precision()));","highlight_start":1,"highlight_end":113},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tif $name::SIGNED {","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tlet neg = -$name::one();","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\tassert_eq!(format!(\"{:?}\", neg), format!(\"{}(-1.{:0>weight$})\", stringify!($name), 0, weight=precision()));","highlight_start":1,"highlight_end":113},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tlet frac = $name::saturating_from_rational(-314, 100);","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\tassert_eq!(format!(\"{:?}\", frac), format!(\"{}(-3.{:0<weight$})\", stringify!($name), 14, weight=precision()));","highlight_start":1,"highlight_end":115},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0282]\u001b[0m\u001b[0m\u001b[1m: type annotations needed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/zb/.cargo/registry/src/github.com-1ecc6299db9ec823/sp-arithmetic-2.0.0/src/fixed_point.rs:541:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m541\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                let accuracy = P::ACCURACY.saturated_into();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconsider giving `accuracy` a type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1614\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimplement_fixed!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1615\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    FixedU128,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1616\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    test_fixed_u128,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1617\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    u128,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1621\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        [0.000000000000000000, 340282366920938463463.374607431768211455]_\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1622\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `implement_fixed` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0282`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0282`.\u001b[0m\n"}
